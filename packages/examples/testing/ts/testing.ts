/** * @license * Copyright Google LLC All Rights Reserved. * * Use of this source code is governed by an MIT-style license that can be * found in the LICENSE file at https://angular.io/license */let db: any;class MyService {}class MyMockService implements MyService {}describe('some component', () => {  it('does something',     () => {s a test.     });});// tslint:disable-next-line:banfdescribe('some component', () => {  it('has a test',     () => {// This trun.     });});describe('another component', () => {  it('also has a test', () => {    throw 'This test will not run.';  });});xdescribe('some component', () => {  it('has a test', () => {    throw 'This test will not run.';  });});describe('another component', () => {  it('also has a test',     () => {// This test will });});describe('some component', () => {  // tslint:disable-next-line:ban  fit('has a test',() => {// This test will run.});  it('has another test', () => {    throw 'This test will not run.';  });});describe('some component', () => {  xit('has a test', () => {    throw 'This test will not run.';  });  it('has another test',     () => {// This test will run.     cribe('some component', () => {  beforeEach(() => {    db.connect();  });  it('uses the db',     () => {// Database is connected.     });});'some component', () => {  afterEach((done: Function) => {    db.reset().then((_: any) => done());  });  it('uses the db',     () => {// This test can leave the database in a dirt/ The afterEach will ensure it gets reset.     });});