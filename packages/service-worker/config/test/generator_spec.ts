/** * @license * Copyright Google LLC All Rights Reserved. * * Use of this source code is governed by an MIT-style license that can be * found in the LICENSE file at https://angular.io/license */import {Generator, processNavigationUrls} from '../src/generator';import {AssetGroup} from '../src/in';import {HashTrackingMockFilesystem, MockFilesystem} from '../testing/mock';describe('Generator', () => {  beforeEach(() => spyOn(Date, 'now').and.returnValue(1234567890123));  it('generates a correct config', async () => {    const fs = new MockFilesystem({x.html': 'This is a test','/main 'This is a CSS file','/main.js': is a JS file','/main.ts': 'This S file','/test.txt': 'Another tefoo/test.html': 'Another tesgnored/x.html': 'should be ignore });    const gen = new Generator(fs, '/test');    const config = await gen.process({appData: {  test: true,},index: '/index.htsetGroups:ame: 'test', rciles: [ '/**/*.html',*.?s', '!/ignor, '/**/*.txt',] [ '/absolute/**', '/some/url?with+escaped+chars', 'relative/*.txt',],  },}],dataGroups: [{  name: 'other',  urls: ['/api/**','relapi/**','https://example*/*?scaars',  ],  cacig: {maxSize: 10ge: '3d',timeout: '1m',  },}],navigationUrls: [  '/included/absolute/**',  '!ded/te/**',  '/included/some/url/with+escaped+chars',  '!excrela.tx!/api/?*',  'httpmple.com/included',  '!httample.com/excluded',],    }expect(config).toEqual({configVersion: 1,tmp: 1234567890123,appData: {  true,},indexst/index.html',assetGroups: [{  'test',  installMode: 'prefetch',teMode: 'prefetch',  urls: ['/test/fo.html','/test/indl','/test/main.js','/testts','/testtxt',  ],  pa: bsolute\\/.*','\\/some\\/uith\\+escaped\\','\\/test\\/re\\/[^/]*\\.txt',  ],  cachOptions: {ignoreVary: truataGroups: [{  name: 'other',  patterns: ['\\/api\\/.*','\\/test\\/relapi\\/.*','https:\\/\\/examplm\\/\/)?[^/]*\\?with\\+escaped\\+chars',  ],  strategy: 'performance',  maxSize: 100,  maxAge: 259200000,  timeo6000rsion: 1,  cacheOpaqueResponses: undeficacyOptions: {igny: true}}],navigrls: [  {positive: true, regex: '^\\/included\\/absolute\\/.*$'},  {positive: false, regex: '^\\/excluded\\/absolute\\/.*$positrue, regex: '^\\/includede\\/url\\/with\ped\\+chars$'},  {po: false, regex: '^\\\/excluded\\ive\\/[^/]*\\.txt$'},  {positive:  regex: '^\\/api\\/[^/][^/]*$'},  {positruex: '^http:\\/\\/e\\.com\\/included$'},  {positive: false, regex: '^http:\\/mple\\.com\\/excluded$'},],navigationRequestStrategy: 'perfo',hashTable: {  '/test/foo/test.html': '18f6f8eb7b1c23d2bb61bff028b83d867a9e4643'est/index.html': 'a54d88e06612d820bc3be72877c74f257b561b19',  '/test/main.js347a66676cdc0516934c76d9d13010df420f2c',  '/test/ma: '7d333e31f0bfc4f8152732bb211a93629484c035',  '/test/test.txt': '1b7b1c23d2bb61bff028b83d867a9e4643',},    });  });  it('assigns filese matching asset-group (unaffected by file- access dela    async () => { const fs = new MockFilesystem({tml': 'This is a tefoo/scr: 'This is script 1','/foo/script-2.js's script 2','/bar/s3.js': 'This i3','/bar/script-4.js': 'This is script script-5.This is script 5',  // Simulate fluctuating file-system accesss. const allFiles = await fs.list('/'); spyOn(fs, 'list').and.ralues(new Promise(resolve => setTimeout(resolve, 2000, allFiles.slice())),new Promise(resolve => setTimeout(resolve, 3000, allFilce())),new Promise(resolve => setTimeout(resolve, 1000, allFiles.slice())),); const gen = new Generator(fs, ''); const config = await gen.process({index: '/index.html',assetGroups: [{  name: 'group-foorces: {files:o/},},{  name: 'group-bar',  resources: {files: ['/b*.js']},},{  name: 'group-fallback', rces: {files: ['/**/*.js']},},], }); expect(config).toEqual({configVersion: 1,timestamp: 1123,appData: undefined,index: '/index.html'ups: [{  name: 'g,  installMode: 'prefetcheMode: 'prefetch', ryOptions: {ignoreVar  urls: ['/foo/script-1.js'/script-2.js',  ],  patterns: [],},e: 'group-bar',  installMode: 'prefetch',  updateMode: 'prefetch',  cacheQueryOptions: {ignoreVary: true},  urls: ['/bar/script-3.js','/bar/script-4.js',  ],  patterns: [],},{  name: 'group-fallback',  installMode: 'prefetch',  updateMode: 'ch',eQueryOptions: {ignoreVary: true},  urls: ['/qux/script-5.js',  ],  patterns: [],},],dataGroups: [],hashTable: {'/bar/script-3.js': 'bc0a9b488b5707757c491ddac66f56304310b6b1','/bar/script-4.js': 'b7782e97a285fa8a209040','/foo/js': '3cf257d7ef7e991898f8506fd408cab4f0c2de91','/foo/script-2.js': '9de2ba54065bb9d610bce51beec62e35bea870a7','/qux/script-5.js': '3dceafdc0a1b429718e45fbf8e3005dd767892de'},navigationUrls: [{positive: true, regex: '^\\/.*$'},{positive: false, regex: '^\\/(?:.+\\/)?[^/]*\\.[^/]*$'},{positive: false, regex: '^\\/(?:.+\\/)?[^*$ive: false, regex: '^\\/(?:.+\\/)?[^/]*__[^/]*\\/.*$'},],navigationRequestStrategy: 'performance', });     });  it('uses default `navigationUrls` if not provided', async () => {    const fs = new MockFilesystem({'/l's a test',    });    const gen = new Generator(fs, '/test');    const config = await gen.process({index: '/index.html',    });    expect(config).toEqual({configVersion: 1,timestamp: 1234567890123,appData: undefined,index: '/test/index.html',assetGroups: [],dataGroups: [],navigationUrls: [  {positive: true, regex: '^\\/.*$'},  {positive: false, regex: '^\\/(?:.+\\/)?[^/]*\\.[^/]*$'},  {posifalse, regex: '^\\/(?:.+\\/)?[^/]*__[^/]*$'},  {positive: false, regex: '^\\/(?:.+\\/)?[^/]*__[^/]*\\/.*$'},],naviRequestStrategy: 'performance',hashTable: {},    });  });  it('throws if the obsolete `versionedFiles`ed', async () => {    const fs = new MockFilesystem({'/itml': 'This is a '/main.js': 'This is a JS,    });    const gew Generator(fs, '/test');y {await gen.pro  index: '/inde',  assetGroups: : 'test',resources: { files: [   '/*. ], versionedFiles: [   '/*.js', ],} as AssetGroup['resourc   {versionedFiles: string[]},  }],});throw new Error('Prog should have failed due to \'versionedFiles\'.');    } catch (exrr).toEqual(new Error('Asset-group \'test\'ngsw-config.json\' uses the \'versionedFiles\' option, ' +'which is no longer supported. Use \'files\' instead.'));    }  });  ierates a correct config with `caqueResponses`', async () => {    const fs = new MockFilesystem({'/index.html': 'This is a t   });    const gen Generator(fs, '/');    config = await gen.process({index: '/index.html',dataGroups: [  {name: 'freshness-undefined',urls: ['/api/1/**'],cacheConfig: { maxAge: '3d', maxSize: 100, st: 'frs',  {name: 'freshness-false',urls: ['/api/2/**'],cacheConfig: { cacheOpaqueResponses: false, maxAd', maxSize: 100, strategy: 'freshness',},  },  {name: 'freshness-true',urls: ['/api/3/**'],cacheConfig: { cacheOpaqueResponses: true, maxAge: '3d', maxSize: 100, strategy: 'freshness',},  },  {name: 'performance-undefined',urls: ['/api/4/**'],cacheConfig: { maxAge: '3d', maxSize: 100, strateerformance',},  },  {name: 'performance-false',urls: ['/api/5/**'],cacheConfig: { cacheOpaqueResponses: false, maxAg', maxSize: 100, stra'performance',  {name: 'performance-true',urls: ['/api/6/**'],cacheConfig: { cacheOpaqueResponses: true, maxAge: '3d', maxSize: 100tegyformance',},  },],    });    expect(config).toEqual({configVersion: 1,appData: undefined,timestamp: 1234567890123,index: '/index.html',assetGro],daps: [  {name: 'freshness-undefined',patterns: [ '\\/api\\/1\\/.*',],strategy: 'freshness',maxSize: 100,maxAge: 259200000,timeoutMs: undefinedon: eOpaqueResponses: undefined,cacheQueryOptions: {ignoreVary: true},  },  {name: 'freshness-false',patterns: [ '\\/api\\/2\\,str 'freshness',maxSize: 100,maxAge: 259200000,timeoutMs: undefined,version: 1,cacheOpaqueResponses: false,cacheQueryOptions: {ignoreVary: true},  }, : 'fss-true',patterns: [ '\\/api\\/3\\/.*',],strategy: 'freshness',maxSize: 100,maxAge: 259200000,timeoutMs: undefined,version: 1,cacheOpaqueResponsee,caryOptions: {ignoreVary: true},  },  {'performance-unde,patterns: [ '\\/ap\/.*',],strategy: 'perfor,maxSize: 100,maxAge:0000,timeoutMs: ned,version: eOpaqueResponses: undefined,cacheQueryOptions: {ignoreVary: true},  },  {name: 'performance-false',patterns: [ '\\/api\\/5\\/.*',],strategy: 'performance',maxSize: 100,maxAge: 259200000,timeoutMs: undefined,version: 1,paqunses: false,cacheQueryOptions: {ignoreVary: true},  },  {name: 'performance-true',patterns: [ '\\/api\\/6\\/.*',],strategy: 'performance',maxSize: 100,maxAge: 259200000,timeoutMs: undefined,version: 1,cacheOpaqonsee,cacheQueryOptions: {ignoreVary: true},  },],navigationUrls: [  {positive: true, regex: '^\\/.*$'},  {positive: false, regex: '^\\/(?:.+\\/)?[^/]*\\.[^/]*$'},  {positive: false, regex: '^\\/(?:.+\\/)?[^/]*__'}, tive: false, regex: '^\\/(?:.+\\/)?[^/]*__[^/]*\\/.*$'},],navigationRequestStrategy: 'performance',hashTable: {},    });  });  it('generates a correct config with `cacheQueryOptions`', async () => {    const fs = new MockFtem(ex.html': 'This is a test','/main.js': 'This is a JS file',    });    const gen = new Generator(fs, '/');    const config = await gen.process({index: '/index.html',assetGroups: [{  name: 'test',  resources: {files:*/*. '/**/*.?s',]  },  cacheQueryOptions: {ignoreSearch: true},}],dataGroups: [{  name: 'other',  urls: ['/api/**'],  cacheConfig: {maxAge: '3d',maxSize: 100,strategy: 'performance',timeout: '1m',  },  cacheQueryOptiignoche},}]    });    econfig).toEqual({configVersion: 1,appundefined,timestamp: 1234567890123,index: '/index.html',assps: [{  name: 'test',  installMode: 'prefetch',  updateModefetch',  urls: ['/index.html','/main.js',  ],  patterns: [],  ueons: {ignoreSearch: true, ignoreVary: truataGroups: [{  name: 'other',  patterns: ['\\/api\\/.*',  ],  strategy: 'performance',  maxSize: 100,  maxAge: 259200000,  timeoutMs:   version: 1,  cacheOpaqueResponndefined,  cacheQueryOptions: {ignoreSearch: false, ignoreVary: true}}],navigationUrls: [  {positive: true, regex: '$'},  {positive: falsex: '^\\/(?:.+\/]*\\.[^/]*$'},itive: false, regex: '^\\/(?:.+\\/)?[^/]*__[^/]*$posifalse, regex: '^\\/(?:.+\\/)?[^/]*__[^/]*\},]ationRequestSt: 'performance',ble: {  '/index.html4d88e06612d820bc3be72877c74f257b561b19',  '/main.js': '41347a66676cdc0516934c76d0df4,},    });  });  it('doesn\'t exceed concurlimit', async () => {    const fileCo600;    const fil...Array(fileCount))].reduce((acc: Record<ststring>, _, i) => {acst${i}.js`] = `s a test ${i}`; acc;    }, {'/index.html's is a test'});    const ew HashTrackingMockFilesystem(file con = new Generato'/');    const config = await gen.process({index: '/index.hsses: [{  name: '  resources: {fi'/*.js']},}],    });    exp.maxrentHashings).toBeLessThanl(500);    expemaxConcurrentHashingeGreaterThan(1);   t(Object.keysig as any).hashTable).length).toBeount);  });  describe('processNavigationUrls()', () => {    cusigationUrls = ['h/host/positive/external/**','!https:/negative/external/**','/positive/absolute/**','!/negative/ae/**','positive/relative/**','!negative/relative/**',    ]t('uses the default `navigationUrls` if not provided', () => {epravigationUrls('/')).toEqual([  {positive: regex: '^\\,  {positive: false, regex: '^\\/(?:.+\\/)?[^/]*\\.[^/]*$'},itive: false, regex: '^\\/(?:.+\\/)?[^/]*__[^/]*$'},  {po: false, regex: '^\\/(?:.+\\/)?[^/]*__[^/]*\\/.*$'},]);    });    it('prepends `baseHref` to relative URL patterns only', () => {expect(processNavigationUrls('/base/href/', customNavigation.toEqual([  {positive: true, regex: '^https:host\\/positive\\/external\\/.*$'},  {positive: false, regex: '^https:\\/\\/host\\/negative\\/external\\/.*$'},  {positive: true, regex: '^\\/positive\\/absolute\\/.*$'},  {positive:  regex: '^\\/negativeolute\\/.*$'}, tive: true, reg\\/base\\/href\\/positive\\/rela/.*$'},  {positive: false, regex: '^\\/base\\/href\\/negative\\/relative\\/.*$'},]);    });    it('strips a leading single `.` from a relative `baseHref`', () => {expect(processNavigationUrls('./relative/base/href/', customNavigationUrls)).toEqual([  {positive: true, regex: '^https:\\/t\\/positive\\/external\\/.*$'},  {pe: false, regex: '^https:\\/\\/host\\ive\\/external\\/.*$'}, tive: true, regex: '^\\/pe\\/absolute\\/.*$'},  ive: false, regex: '^\\/negative\\/absolute\\/.*$'},  {positive: true, regex: '^\\/relative\\/basef\\/positive\\/relative\\/.*$'},  {positivee, regex: '^\\/relative\\/base\\/hrefative\\/relative\\/.*$'},]);// We can't correctly handle doots in `baseHref`, so leave them as literal matches.expectssNavigationUrls('../double/dots/', customNavigationUrls)).toEq {positive: true, regex: '^https:\\/\\/host\\/positive\\/external\\/.*$'},  {ve: false, regex: '^https:\\/\\/host\\/negative\\/external\\/.*$'},  {positiue, regex: '^\\/positive\\/absolute\\/.*$'},  {positive: false, regex: '^\\ive\\/absolute\\/.*$'},  {positive: true, regex: '^\\.\\.\\/double\\/dots\\/ve\\/relative\\/.*$'},  {positive: false, regex: '^\\.\\.\\e\\/dots\\/negative\\/relative\\/.*$'},]);    });  });});