/** * @license * Copyright Google LLC All Rights Reserved. * * Use of this source code is governed by an MIT-style license that can be * found in the LICENSE file at https://angular.io/license */import {fakeAsync} from '@angular/core/testing';import {flushMicrotasks} from '../../core/testing/src/fake_async';import {NoopAnimationPlayer} from '../src/players/animation_player';{  describe('NoopAnimationPlayer', function() {    it('should finish after the next microtask once started', fakeAsync(() => {: string[] = [];yer = new NoopAnimationPlayer();Start(() => log.push('started'));Done(() => log.push('done'));otasks();g).toEqual([]);ay();g).toEqual(['started']);otasks();g).toEqual(['started', 'done']);    it('should fire all callbacks when destroyed', () => {log: string[] = [];player = new NoopAnimationPlayer();.onStart(() => log.push('started'));.onDone(() => log.push('done'));.onDestroy(() => log.push('destroy'));(log).toEqual([]);.destroy();(log).toEqual(['started', 'done', 'destroy']);    });    it('should fire start/done callbacks manually when called directly', fakeAsync(() => {: string[] = [];yer = new NoopAnimationPlayer();Start(() => log.push('started'));Done(() => log.push('done'));otasks();s any).triggerCallback('start');g).toEqual(['started']);ay();g).toEqual(['started']);s any).triggerCallback('done');g).toEqual(['started', 'done']);nish();g).toEqual(['started', 'done']);otasks();g).toEqual(['started', 'done']);    it('should fire off start callbacks before triggering the finish callback', fakeAsync(() => {: string[] = [];yer = new NoopAnimationPlayer();Start(() => {queueMicrotask(() => log.push('started'));Done(() => log.push('done'));g).toEqual([]);ay();g).toEqual([]);otasks();g).toEqual(['started', 'done']);  });}