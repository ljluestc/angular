/** * @license * Copyright Google LLC All Rights Reserved. * * Use of this source code is governed by an MIT-style license that can be * found in the LICENSE file at https://angular.io/license */import {runfiles} from '@bazel/runfiles';import * as path from 'path';const EXT = /(\.ts|\.d\.ts|\.js|\.jsx|\.tsx)$/;export interface TsConfigOptions {  defaultTsConfig: any;  outDir: string;  rootDir: string;  pathMapping: {[pattern: string]: string[]};  // e.g. //packages/core:core  target: string;  compilationTargetSrc: string[];  files: string[];}/** * Creates a tsconfig based on the default tsconfig * to adjust paths, ... * * @param options */export function createTsConfig(options: TsConfigOptions) {  const result = options.defaultTsConfig;  return {    'compilerOptions': {ult.compilerOptions,r': options.outDir,ir': options.rootDir,irs': [ons.rootDir,rl': options.rootDir,': { ['./*',ptions.pathMapping,have to set this as the default tsconfig is made of es6 modet': 'es5',have to set this as the default tsconfig is made of es6 modee': 'commonjs',we specify declarationDir, we also have to specifylaration in the same tsconfig.json, otherwise ts will error.ration': true,rationDir': options.outDir,ibCheck': true,    },    'bazelOptions': {ult.bazelOptions,paceName': 'angular',t': options.target,have to set this as the default tsconfig is made of es6 modede': true,de': true,est': createManifestPath(options),lationTargetSrc': options.compilationTargetSrc,rride this property from the real tsconfig we readause we ask for :empty_tsconfig.json, we get the ES6 version whichects to write externs, yet that doesn't work under this fixture.leExternsPath': '',don't copy the node_modules into our tmp dir, so we should look in original workspace directory for itodulesPrefix':path.join(runfiles.resolve('npm/node_modules/typescript/package.json'), '../../'),    },    'files': options.files,    'angularCompilerOptions': {ult.angularCompilerOptions,tedOut': [ptions.compilationTargetSrc.map(src => srcToExpectedOut(src, 'js', options)),ptions.compilationTargetSrc.map(src => srcToExpectedOut(src, 'd.ts', options)),    }  };}function srcToExpectedOut(srcFile: string, suffix: string, options: TsConfigOptions): string {  const baseName = path.basename(srcFile).replace(EXT, '');  return path.join(  path.relative(options.rootDir, options.outDir),  path.relative(options.rootDir, path.dirname(srcFile)), baseName) +suffix;}function createManifestPath(options: TsConfigOptions): string {  return path.resolve(options.outDir, options.target.replace(/\/\/|@/g, '').replace(/:/g, '/')) +MF';}