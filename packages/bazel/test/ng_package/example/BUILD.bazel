load("//tools:defaults.bzl", "ng_module", "ng_package", "pkg_npm")package(default_visibility = ["//packages/bazel/test:__subpackages__"])ng_module(    name = "example",    srcs = glob(["*.ts"]),    module_name = "example",    deps = [ackages/bazel/test/ng_package/example/secondary",m//@types",    ],)ng_package(    name = "npm_package",    srcs = [dex.scss",kage.json",e-file.txt",bitrary_bin_file",bitrary_genfiles_file",tra-styles.css",go.png",is file should be just ignored, and not copied into the package.ackages/bazel/test/ng_package:outside_package.txt",    ],    nested_packages = [bitrary_npm_package",    ],    primary_bundle_name = "waffels",    deps = [ample",ackages/bazel/test/ng_package/example/a11y",ackages/bazel/test/ng_package/example/imports",ackages/bazel/test/ng_package/example/secondary",    ],)# Use a genrule to create a file in bazel-genfiles to ensure that the genfiles output of# a rule can be passed through to the `data` of ng_package.genrule(    name = "arbitrary_genfiles_file",    outs = ["arbitrary_genfiles.txt"],    cmd = "echo Hello > $@",)# Use a genrule to create a file in bazel-bin to ensure that the bin output of# a rule can be passed through to the `data` of ng_package.genrule(    name = "arbitrary_bin_file",    outs = ["arbitrary_bin.txt"],    cmd = "echo World > $@",    output_to_bindir = True,)pkg_npm(    name = "arbitrary_npm_package",    srcs = [":arbitrary-npm-package-main.js"],)