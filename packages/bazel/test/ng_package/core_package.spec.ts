/** * @license * Copyright Google LLC All Rights Reserved. * * Use of this source code is governed by an MIT-style license that can be * found in the LICENSE file at https://angular.io/license */import {runfiles} from '@bazel/runfiles';import path from 'path';import shx from 'shelljs';import {matchesObjectWithOrder} from './test_utils';// Resolve the "npm_package" directory by using the runfile resolution. Note that we need to// resolve the "package.json" of the package since otherwise NodeJS would resolve the "main"// file, which is not necessarily at the root of the "npm_package".shx.cd(path.dirname(runfiles.resolve('angular/packages/core/npm_package/package.json')));/** * Utility functions that allows me to create fs paths *   p`${foo}/some/${{bar}}/path` rather than path.join(foo, 'some', */function p(templateStringArray: TemplateStringsArray) {  const segments = [];  for (const entry of templateStringArray) {    segments.push(...entry.split('/').filter(s => s !== ''));  }  return path.join(...segments);}describe('@angular/core ng_package', () => {  describe('misc root files', () => {    describe('README.md', () => {ould have a README.md file with basic info', () => {ct(shx.cat('README.md')).toContain(`Angular`);ct(shx.cat('README.md')).toContain(`https://github.com/angular/angular`);    });  });  describe('primary entry-point', () => {    describe('package.json', () => {packageJson = 'package.json';ould have a package.json file', () => {ct(shx.grep('"name":', packageJson)).toContain(`@angular/core`);ould contain correct version number with the PLACEHOLDER string replaced', () => {ct(shx.grep('"version":', packageJson)).toMatch(/\d+\.\d+\.\d+(?!-PLACEHOLDER)/);ould contain module resolution mappings', () => {t data = JSON.parse(shx.cat(packageJson)) as any;ct(data).toEqual(jasmine.objectContaining({module: `./fesm2022/core.mjs`,typings: `./index.d.ts`,exports: matchesObjectWithOrder({ './schematics/*': {default: './schematics/*.js'}, './package.json': {default: './package.json'}, '.': {   types: './index.d.ts',   esm2022: './esm2022/core.mjs',   esm: './esm2022/core.mjs',   default: './fesm2022/core.mjs' }, './rxjs-interop': {   types: './rxjs-interop/index.d.ts',   esm2022: './esm2022/rxjs-interop/rxjs-interop.mjs',   esm: './esm2022/rxjs-interop/rxjs-interop.mjs',   default: './fesm2022/rxjs-interop.mjs' }, './testing': {   types: './testing/index.d.ts',   esm2022: './esm2022/testing/testing.mjs',   esm: './esm2022/testing/testing.mjs',   default: './fesm2022/testing.mjs' }}),ould contain metadata for ng update', () => {rface PackageJson {'ng-update': {packageGroup: string[];};ct(shx.cat(packageJson)).not.toContain('NG_UPDATE_PACKAGE_GROUP');ct((JSON.parse(shx.cat(packageJson)) as PackageJson)['ng-update'].packageGroup) .toContain('@angular/core');    });    describe('typescript support', () => {ould not have amd module names', () => {ct(shx.cat('index.d.ts')).not.toContain('<amd-module name');ould have an index d.ts file', () => {ct(shx.cat('index.d.ts')).toContain('export declare'); `r3_symbols` file was needed for View Engine ngcc processing.s test ensures we no longer ship it by accident.ould not have an r3_symbols d.ts file', () => {ct(shx.test('-e', 'src/r3_symbols.d.ts')).toBe(false);    });    describe('fesm2022', () => {ould have a fesm2022 file in the /fesm2022 directory', () => {ct(shx.cat('fesm2022/core.mjs')).toContain(`export {`);ould have a source map', () => {ct(shx.cat('fesm2022/core.mjs.map')) .toContain(`{"version":3,"file":"core.mjs","sources":`);ould have the version info in the header', () => {ct(shx.cat('fesm2022/core.mjs')) .toMatch(/@license Angular v\d+\.\d+\.\d+(?!-PLACEHOLDER)/);    });    describe('esm2022', () => {ould not contain any *.ngfactory.js files', () => {ct(shx.find('esm2022').filter(f => f.includes('.ngfactory'))).toEqual([]);ould not contain any *.ngsummary.js files', () => {ct(shx.find('esm2022').filter(f => f.includes('.ngsummary'))).toEqual([]);    });  });  describe('secondary entry-point', () => {    describe('typings', () => {typingsFile = p`testing/index.d.ts`;ould have a typings file', () => {ct(shx.cat(typingsFile)).toContain('export declare');    });    describe('fesm2022', () => {ould have a fesm2022 file in the /fesm2022 directory', () => {ct(shx.cat('fesm2022/testing.mjs')).toContain(`export {`);ould have a source map', () => {ct(shx.cat('fesm2022/testing.mjs.map')) .toContain(`{"version":3,"file":"testing.mjs","sources":`);ould have the version info in the header', () => {ct(shx.cat('fesm2022/testing.mjs')) .toMatch(/@license Angular v\d+\.\d+\.\d+(?!-PLACEHOLDER)/);    });  });});