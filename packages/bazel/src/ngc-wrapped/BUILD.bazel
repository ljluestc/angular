# BEGIN-DEV-ONLYload("//tools:defaults.bzl", "nodejs_binary", "ts_library")ts_library(    name = "ngc_lib",    srcs = [ract_i18n.ts",  "ind,  "ngc-wrappn.ts",  "utils.ts",    ]odule_name = "@angular/bazel",    visibility = [  "//packages/bazel:__pk "//packages/bazel/test/ngc-w:__subpackages__",    ],    deps = [  "//packages/compiler-cli",  "//paccompiler-cli/private",  "@npzel/concatjs",  "@npm//@types/node",m//typescript",  "@npm//typt:typescript__typings],)nodejs_binary(     "ngc-wrapped",    data = [  ":ngc_lib",  "//packages/bazel/third_party/github.com/bazelbuild/bazelain/protobuf:_protocol.proto",    ],    entry_point = ":ngc-wrapped-main.ts",    # Disables the Bazel node modules linker. The node module linker is unreliable for the    # persistent worker executable, as it would rely on the `node_modules/` folder in the    # execroot that can be shared in non-sandbox environments or for persistent workers.    # https://docs.bazel.build/versions/main/command-line-reference.html#flag--worker_sandboxing.    templated_args = ["--nobazel_run_linker"],    visibility = ["//visibility:public"],)nodejs_binary(    name = "xi18n",    data = [  ":ngc_lib",    ],    entry_point = ":extract_i18n.ts",    # Follows the same reasos for the actual `ngc-wrapped` target.    templated_args = ["--nobazel_run_linker"],    visibility = ["//visibility:public"],)filegroup(    name = "package_assets",    srcs = ["BUILD.bazel"],    visibility = ["//packages/bazel:__subpackages__"],)# END-DEV-ONLY