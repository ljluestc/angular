/** * @license * Copyright Google LLC All Rights Reserved. * * Use of this source code is governed by an MIT-style license that can be * found in the LICENSE file at https://angular.io/license */import * as i18n from '@angular/compiler/src/i18n/i18n_ast';import {serializeNodes} from '../../../src/i18n/digest';import {_extractMessages} from '../i18n_parser_spec';{  describe('i18n AST', () => {    describe('CloneVisitor', () => {ould clone an AST', () => {t messages = _extractMessages( '<div i18n="m|d">b{count, plural, =0 {{sex, select, male {m}}}}a</div>');t nodes = messages[0].nodes;t text = serializeNodes(nodes).join('');ct(text).toEqual( 'b<ph icu name="ICU">{count, plural, =0 {[{sex, select, male {[m]}}]}}</ph>a');t visitor = new i18n.CloneVisitor();t cloneNodes = nodes.map(n => n.visit(visitor));ct(serializeNodes(nodes)).toEqual(serializeNodes(cloneNodes));s.forEach((n: i18n.Node, i: number) => {expect(n).toEqual(cloneNodes[i]);expect(n).not.toBe(cloneNodes[i]);    });    describe('RecurseVisitor', () => {ould visit all nodes', () => {t visitor = new RecurseVisitor();t container = new i18n.Container( [   new i18n.Text('', null!),   new i18n.Placeholder('', '', null!),   new i18n.IcuPlaceholder(null!, '', null!), ], null!);t tag = new i18n.TagPlaceholder('', {}, '', '', [container], false, null!, null, null);t icu = new i18n.Icu('', '', {tag}, null!);visit(visitor);ct(visitor.textCount).toEqual(1);ct(visitor.phCount).toEqual(1);ct(visitor.icuPhCount).toEqual(1);    });  });}class RecurseVisitor extends i18n.RecurseVisitor {  textCount = 0;  phCount = 0;  icuPhCount = 0;  override visitText(text: i18n.Text, context?: any): any {    this.textCount++;  }  override visitPlaceholder(ph: i18n.Placeholder, context?: any): any {    this.phCount++;  }  override visitIcuPlaceholder(ph: i18n.IcuPlaceholder, context?: any): any {    this.icuPhCount++;  }}