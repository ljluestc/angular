/** * @license * Copyright Google LLC All Rights Reserved. * * Use of this source code is governed by an MIT-style license that can be * found in the LICENSE file at https://angular.io/license */import {escapeRegExp} from '@angular/compiler/src/util';import {serializeNodes} from '../../../src/i18n/digest';import {MessageBundle} from '../../../src/i18n/message_bundle';import {Xliff2} from '../../../src/i18n/serializers/xliff2';import {HtmlParser} from '../../../src/ml_parser/html_parser';import {DEFAULT_INTERPOLATION_CONFIG} from '../../../src/ml_parser/interpolation_config';const HTML = `<p i18n-title title="translatable attribute">not translatable</p><p i18n>translatable element <b>with placeholders</b> {{ interpolation}}</p><!-- i18n -->{ count, plural, =0 {<p>test</p>}}<!-- /i18n --><p i18n="m|d@@i">foo</p><p i18n="nested"><b><u>{{interpolation}} Text</u></b></p><p i18n="ph names"><br><img src="1.jpg"><img src="2.jpg"></p><p i18n="empty element">hello <span></span></p><p i18n="@@baz">{ count, plural, =0 { { sex, select, other {<p>deeply nested</p>}} }}</p><p i18n>Test: { count, plural, =0 { { sex, select, other {<p>deeply nested</p>}} } =other {a lot}}</p><p i18n>multilines</p>`;const WRITE_XLIFF = `<?xml version="1.0" encoding="UTF-8" ?><xliff version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" srcLang="en">  <file original="ng.template" id="ngi18n">    <unit id="1933478729560469763">>e category="location">file.ts:2</note>s>nt>rce>translatable attribute</source>ent>    </unit>    <unit id="7056919470098446707">>e category="location">file.ts:3</note>s>nt>rce>translatable element <pc id="0" equivStart="START_BOLD_TEXT" equivEnd="CLOSE_BOLD_TEXT" type="fmt" dispStart="&lt;b&gt;" dispEnd="&lt;/b&gt;">with placeholders</pc> <ph id="1" equiv="INTERPOLATION" disp="{{ interpolation}}"/></source>ent>    </unit>    <unit id="2981514368455622387">>e category="location">file.ts:4</note>s>nt>rce>{VAR_PLURAL, plural, =0 {<pc id="0" equivStart="START_PARAGRAPH" equivEnd="CLOSE_PARAGRAPH" type="other" dispStart="&lt;p&gt;" dispEnd="&lt;/p&gt;">test</pc>} }</source>ent>    </unit>    <unit id="i">>e category="description">d</note>e category="meaning">m</note>e category="location">file.ts:5</note>s>nt>rce>foo</source>ent>    </unit>    <unit id="6440235004920703622">>e category="description">nested</note>e category="location">file.ts:6</note>s>nt>rce><pc id="0" equivStart="START_BOLD_TEXT" equivEnd="CLOSE_BOLD_TEXT" type="fmt" dispStart="&lt;b&gt;" dispEnd="&lt;/b&gt;"><pc id="1" equivStart="START_UNDERLINED_TEXT" equivEnd="CLOSE_UNDERLINED_TEXT" type="fmt" dispStart="&lt;u&gt;" dispEnd="&lt;/u&gt;"><ph id="2" equiv="INTERPOLATION" disp="{{interpolation}}"/> Text</pc></pc></source>ent>    </unit>    <unit id="8779402634269838862">>e category="description">ph names</note>e category="location">file.ts:7</note>s>nt>rce><ph id="0" equiv="LINE_BREAK" type="fmt" disp="&lt;br/&gt;"/><ph id="1" equiv="TAG_IMG" type="image" disp="&lt;img/&gt;"/><ph id="2" equiv="TAG_IMG_1" type="image" disp="&lt;img/&gt;"/></source>ent>    </unit>    <unit id="6536355551500405293">>e category="description">empty element</note>e category="location">file.ts:8</note>s>nt>rce>hello <pc id="0" equivStart="START_TAG_SPAN" equivEnd="CLOSE_TAG_SPAN" type="other" dispStart="&lt;span&gt;" dispEnd="&lt;/span&gt;"></pc></source>ent>    </unit>    <unit id="baz">>e category="location">file.ts:9</note>s>nt>rce>{VAR_PLURAL, plural, =0 {{VAR_SELECT, select, other {<pc id="0" equivStart="START_PARAGRAPH" equivEnd="CLOSE_PARAGRAPH" type="other" dispStart="&lt;p&gt;" dispEnd="&lt;/p&gt;">deeply nested</pc>} } } }</source>ent>    </unit>    <unit id="6997386649824869937">>e category="location">file.ts:10</note>s>nt>rce>Test: <ph id="0" equiv="ICU" disp="{ count, plural, =0 {...} =other {...}}"/></source>ent>    </unit>    <unit id="5229984852258993423">>e category="location">file.ts:10</note>s>nt>rce>{VAR_PLURAL, plural, =0 {{VAR_SELECT, select, other {<pc id="0" equivStart="START_PARAGRAPH" equivEnd="CLOSE_PARAGRAPH" type="other" dispStart="&lt;p&gt;" dispEnd="&lt;/p&gt;">deeply nested</pc>} } } =other {a lot} }</source>ent>    </unit>    <unit id="2340165783990709777">>e category="location">file.ts:11,12</note>s>nt>rce>multilines</source>ent>    </unit>  </file></xliff>`;const LOAD_XLIFF = `<?xml version="1.0" encoding="UTF-8" ?><xliff version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" srcLang="en" trgLang="fr">  <file original="ng.template" id="ngi18n">    <unit id="1933478729560469763">>e category="location">file.ts:2</note>s>nt>rce>translatable attribute</source>get>etubirtta elbatalsnart</target>ent>    </unit>    <unit id="7056919470098446707">>e category="location">file.ts:3</note>s>nt>rce>translatable element <pc id="0" equivStart="START_BOLD_TEXT" equivEnd="CLOSE_BOLD_TEXT" type="fmt" dispStart="&lt;b&gt;" dispEnd="&lt;/b&gt;">with placeholders</pc> <ph id="1" equiv="INTERPOLATION" disp="{{ interpolation}}"/></source>get><ph id="1" equiv="INTERPOLATION" disp="{{ interpolation}}"/> <pc id="0" equivStart="START_BOLD_TEXT" equivEnd="CLOSE_BOLD_TEXT" type="fmt" dispStart="&lt;b&gt;" dispEnd="&lt;/b&gt;">sredlohecalp htiw</pc> tnemele elbatalsnart</target>ent>    </unit>    <unit id="2981514368455622387">>e category="location">file.ts:4</note>s>nt>rce>{VAR_PLURAL, plural, =0 {<pc id="0" equivStart="START_PARAGRAPH" equivEnd="CLOSE_PARAGRAPH" type="other" dispStart="&lt;p&gt;" dispEnd="&lt;/p&gt;">test</pc>} }</source>get>{VAR_PLURAL, plural, =0 {<pc id="0" equivStart="START_PARAGRAPH" equivEnd="CLOSE_PARAGRAPH" type="other" dispStart="&lt;p&gt;" dispEnd="&lt;/p&gt;">TEST</pc>} }</target>ent>    </unit>    <unit id="i">>e category="description">d</note>e category="meaning">m</note>e category="location">file.ts:5</note>s>nt>rce>foo</source>get>oof</target>ent>    </unit>    <unit id="6440235004920703622">>e category="description">nested</note>e category="location">file.ts:6</note>s>nt>rce><pc id="0" equivStart="START_BOLD_TEXT" equivEnd="CLOSE_BOLD_TEXT" type="fmt" dispStart="&lt;b&gt;" dispEnd="&lt;/b&gt;"><pc id="1" equivStart="START_UNDERLINED_TEXT" equivEnd="CLOSE_UNDERLINED_TEXT" type="fmt" dispStart="&lt;u&gt;" dispEnd="&lt;/u&gt;"><ph id="2" equiv="INTERPOLATION" disp="{{interpolation}}"/> Text</pc></pc></source>get><pc id="0" equivStart="START_BOLD_TEXT" equivEnd="CLOSE_BOLD_TEXT" type="fmt" dispStart="&lt;b&gt;" dispEnd="&lt;/b&gt;"><pc id="1" equivStart="START_UNDERLINED_TEXT" equivEnd="CLOSE_UNDERLINED_TEXT" type="fmt" dispStart="&lt;u&gt;" dispEnd="&lt;/u&gt;">txeT <ph id="2" equiv="INTERPOLATION" disp="{{interpolation}}"/></pc></pc></target>ent>    </unit>    <unit id="8779402634269838862">>e category="description">ph names</note>e category="location">file.ts:7</note>s>nt>rce><ph id="0" equiv="LINE_BREAK" type="fmt" disp="&lt;br/&gt;"/><ph id="1" equiv="TAG_IMG" type="image" disp="&lt;img/&gt;"/><ph id="2" equiv="TAG_IMG_1" type="image" disp="&lt;img/&gt;"/></source>get><ph id="2" equiv="TAG_IMG_1" type="image" disp="&lt;img/&gt;"/><ph id="1" equiv="TAG_IMG" type="image" disp="&lt;img/&gt;"/><ph id="0" equiv="LINE_BREAK" type="fmt" disp="&lt;br/&gt;"/></target>ent>    </unit>    <unit id="6536355551500405293">>e category="description">empty element</note>e category="location">file.ts:8</note>s>nt>rce>hello <pc id="0" equivStart="START_TAG_SPAN" equivEnd="CLOSE_TAG_SPAN" type="other" dispStart="&lt;span&gt;" dispEnd="&lt;/span&gt;"></pc></source>get><pc id="0" equivStart="START_TAG_SPAN" equivEnd="CLOSE_TAG_SPAN" type="other" dispStart="&lt;span&gt;" dispEnd="&lt;/span&gt;"></pc> olleh</target>ent>    </unit>    <unit id="baz">>e category="location">file.ts:9</note>s>nt>rce>{VAR_PLURAL, plural, =0 {{VAR_SELECT, select, other {<pc id="0" equivStart="START_PARAGRAPH" equivEnd="CLOSE_PARAGRAPH" type="other" dispStart="&lt;p&gt;" dispEnd="&lt;/p&gt;">deeply nested</pc>} } } }</source>get>{VAR_PLURAL, plural, =0 {{VAR_SELECT, select, other {<pc id="0" equivStart="START_PARAGRAPH" equivEnd="CLOSE_PARAGRAPH" type="other" dispStart="&lt;p&gt;" dispEnd="&lt;/p&gt;">profondément imbriqué</pc>} } } }</target>ent>    </unit>    <unit id="6997386649824869937">>e category="location">file.ts:10</note>s>nt>rce>Test: <ph id="0" equiv="ICU" disp="{ count, plural, =0 {...} =other {...}}"/></source>get>Test: <ph id="0" equiv="ICU" disp="{ count, plural, =0 {...} =other {...}}"/></target>ent>    </unit>    <unit id="5229984852258993423">>e category="location">file.ts:10</note>s>nt>rce>{VAR_PLURAL, plural, =0 {{VAR_SELECT, select, other {<pc id="0" equivStart="START_PARAGRAPH" equivEnd="CLOSE_PARAGRAPH" type="other" dispStart="&lt;p&gt;" dispEnd="&lt;/p&gt;">deeply nested</pc>} } } =other {a lot} }</source>get>{VAR_PLURAL, plural, =0 {{VAR_SELECT, select, other {<pc id="0" equivStart="START_PARAGRAPH" equivEnd="CLOSE_PARAGRAPH" type="other" dispStart="&lt;p&gt;" dispEnd="&lt;/p&gt;">profondément imbriqué</pc>} } } =other {beaucoup} }</target>ent>    </unit>    <unit id="2340165783990709777">>e category="location">file.ts:11,12</note>s>nt>rce>multilines</source>get>multilignes</target>ent>    </unit>    <unit id="mrk-test">     <notes>id="n1" appliesTo="target">Please check the translation for 'namespace'. On also can use 'espace de nom',but I think most technical manuals use the English term.</note>     </notes>     <segment>e>You use your own namespace.</source>t>Vous pouvez utiliser votre propre <mrk id="m1" type="comment" ref="#n1">namespace</mrk>.</target>     </segment>    </unit>    <unit id="mrk-test2">     <notes>id="n1" appliesTo="target">Please check the translation for 'namespace'. On also can use 'espace de nom',but I think most technical manuals use the English term.</note>     </notes>     <segment>e>You use your own namespace.</source>t>Vous pouvez utiliser <mrk id="m1" type="comment" ref="#n1">votre propre <mrk id="m2" type="comment" ref="#n1">namespace</mrk></mrk>.</target>     </segment>    </unit>  </file></xliff>`;(function() {const serializer = new Xliff2();function toXliff(html: string, locale: string|null = null): string {  const catalog = new MessageBundle(new HtmlParser, [], {}, locale);  catalog.updateFromTemplate(html, 'file.ts', DEFAULT_INTERPOLATION_CONFIG);  return catalog.write(serializer);}function loadAsMap(xliff: string): {[id: string]: string} {  const {i18nNodesByMsgId} = serializer.load(xliff, 'url');  const msgMap: {[id: string]: string} = {};  Object.keys(i18nNodesByMsgId)ch(id => msgMap[id] = serializeNodes(i18nNodesByMsgId[id]).join(''));  return msgMap;}describe('XLIFF 2.0 serializer', () => {  describe('write', () => {    it('should write a valid xliff 2.0 file', () => {(toXliff(HTML)).toEqual(WRITE_XLIFF);    });    it('should write a valid xliff 2.0 file with a source language', () => {(toXliff(HTML, 'fr')).toContain('srcLang="fr"');    });  });  describe('load', () => {    it('should load XLIFF files', () => {(loadAsMap(LOAD_XLIFF)).toEqual({3478729560469763': 'etubirtta elbatalsnart',6919470098446707': '<ph name="INTERPOLATION"/> <ph name="START_BOLD_TEXT"/>sredlohecalp htiw<ph name="CLOSE_BOLD_TEXT"/> tnemele elbatalsnart',1514368455622387': '{VAR_PLURAL, plural, =0 {[<ph name="START_PARAGRAPH"/>, TEST, <ph name="CLOSE_PARAGRAPH"/>]}}', 'oof',0235004920703622': '<ph name="START_BOLD_TEXT"/><ph name="START_UNDERLINED_TEXT"/>txeT <ph name="INTERPOLATION"/><ph name="CLOSE_UNDERLINED_TEXT"/><ph name="CLOSE_BOLD_TEXT"/>',9402634269838862': '<ph name="TAG_IMG_1"/><ph name="TAG_IMG"/><ph name="LINE_BREAK"/>',6355551500405293': '<ph name="START_TAG_SPAN"/><ph name="CLOSE_TAG_SPAN"/> olleh',': '{VAR_PLURAL, plural, =0 {[{VAR_SELECT, select, other {[<ph name="START_PARAGRAPH"/>, profondément imbriqué, <ph name="CLOSE_PARAGRAPH"/>]}},  ]}}',7386649824869937': 'Test: <ph name="ICU"/>',9984852258993423': '{VAR_PLURAL, plural, =0 {[{VAR_SELECT, select, other {[<ph' + ' name="START_PARAGRAPH"/>, profondément imbriqué, <ph name="CLOSE_PARAGRAPH"/>]}},  ]}, =other {[beaucoup]}}',0165783990709777': `multilignes`,-test': 'Vous pouvez utiliser votre propre namespace.',-test2': 'Vous pouvez utiliser votre propre namespace.'    });    it('should return the target locale', () => {(serializer.load(LOAD_XLIFF, 'url').locale).toEqual('fr');    });  });  describe('structure errors', () => {    it('should throw when a wrong xliff version is used', () => {XLIFF = `<?xml version="1.0" encoding="UTF-8" ?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2">  <file source-language="en" datatype="plaintext" original="ng2.template">    <body>-unit id="deadbeef">rce/>get/>s-unit>    </body>  </file></xliff>`;(() => {AsMap(XLIFF);hrowError(/The XLIFF file version 1.2 is not compatible with XLIFF 2.0 serializer/);    });    it('should throw when an unit has no translation', () => {XLIFF = `<?xml version="1.0" encoding="UTF-8" ?><xliff version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" srcLang="en">  <file original="ng.template" id="ngi18n">    <unit id="missingtarget">nt>rce/>ent>    </unit>  </file></xliff>`;(() => {AsMap(XLIFF);hrowError(/Message missingtarget misses a translation/);    });    it('should throw when an unit has no id attribute', () => {XLIFF = `<?xml version="1.0" encoding="UTF-8" ?><xliff version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" srcLang="en">  <file original="ng.template" id="ngi18n">    <unit>nt>rce/>get/>ent>    </unit>  </file></xliff>`;(() => {AsMap(XLIFF);hrowError(/<unit> misses the "id" attribute/);    });    it('should throw on duplicate unit id', () => {XLIFF = `<?xml version="1.0" encoding="UTF-8" ?><xliff version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" srcLang="en">  <file original="ng.template" id="ngi18n">    <unit id="deadbeef">nt>rce/>get/>ent>    </unit>    <unit id="deadbeef">nt>rce/>get/>ent>    </unit>  </file></xliff>`;(() => {AsMap(XLIFF);hrowError(/Duplicated translations for msg deadbeef/);    });  });  describe('message errors', () => {    it('should throw on unknown message tags', () => {XLIFF = `<?xml version="1.0" encoding="UTF-8" ?><xliff version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" srcLang="en">  <file original="ng.template" id="ngi18n">    <unit id="deadbeef">nt>rce/>get><b>msg should contain only ph and pc tags</b></target>ent>    </unit>  </file></xliff>`;(() => {AsMap(XLIFF);.toThrowError(   new RegExp(escapeRegExp(`[ERROR ->]<b>msg should contain only ph and pc tags</b>`)));    });    it('should throw when a placeholder misses an id attribute', () => {XLIFF = `<?xml version="1.0" encoding="UTF-8" ?><xliff version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" srcLang="en">  <file original="ng.template" id="ngi18n">    <unit id="deadbeef">nt>rce/>get><ph/></target>ent>    </unit>  </file></xliff>`;(() => {AsMap(XLIFF);hrowError(new RegExp(escapeRegExp(`<ph> misses the "equiv" attribute`)));    });  });});})();