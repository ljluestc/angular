/** * @license * Copyright Google LLC All Rights Reserved. * * Use of this source code is governed by an MIT-style license that can be * found in the LICENSE file at https://angular.io/license */import {CssSelector, SelectorMatcher} from '@angular/compiler/src/selector';import {el} from '@angular/platform-browser/testing/src/browser_util';{  describe('SelectorMatcher', () => {    let matcher: SelectorMatcher;    let selectableCollector: (selector: CssSelector, context: any) => void;    let s1: any[], s2: any[], s3: any[], s4: any[];    let matched: any[];    function reset() {d = [];    }    beforeEach(() => {);2 = s3 = s4 = null!;ableCollector = (selector: CssSelector, context: any) => {hed.push(selector, context);r = new SelectorMatcher();    });    it('should select by element name case sensitive', () => {r.addSelectables(s1 = CssSelector.parse('someTag'), 1);(matcher.match(getSelectorFor({tag: 'SOMEOTHERTAG'}), selectableCollector)).toEqual(false);(matched).toEqual([]);(matcher.match(getSelectorFor({tag: 'SOMETAG'}), selectableCollector)).toEqual(false);(matched).toEqual([]);(matcher.match(getSelectorFor({tag: 'someTag'}), selectableCollector)).toEqual(true);(matched).toEqual([s1[0], 1]);    });    it('should select by class name case insensitive', () => {r.addSelectables(s1 = CssSelector.parse('.someClass'), 1);r.addSelectables(s2 = CssSelector.parse('.someClass.class2'), 2);(matcher.match(getSelectorFor({classes: 'SOMEOTHERCLASS'}), selectableCollector)).toEqual(false);(matched).toEqual([]);(matcher.match(getSelectorFor({classes: 'SOMECLASS'}), selectableCollector)).toEqual(true);(matched).toEqual([s1[0], 1]););(matcher.match(getSelectorFor({classes: 'someClass class2'}), selectableCollector)).toEqual(true);(matched).toEqual([s1[0], 1, s2[0], 2]);    });    it('should not throw for class name "constructor"', () => {(matcher.match(getSelectorFor({classes: 'constructor'}), selectableCollector)).toEqual(false);(matched).toEqual([]);    });    it('should select by attr name case sensitive independent of the value', () => {r.addSelectables(s1 = CssSelector.parse('[someAttr]'), 1);r.addSelectables(s2 = CssSelector.parse('[someAttr][someAttr2]'), 2);(matcher.match(getSelectorFor({attrs: [['SOMEOTHERATTR', '']]}), selectableCollector)).toEqual(false);(matched).toEqual([]);(matcher.match(getSelectorFor({attrs: [['SOMEATTR', '']]}), selectableCollector)).toEqual(false);(matched).toEqual([]);(matcher.match(getSelectorFor({attrs: [['SOMEATTR', 'someValue']]}), selectableCollector)).toEqual(false);(matched).toEqual([]);(matcher.match(   getSelectorFor({attrs: [['someAttr', ''], ['someAttr2', '']]}), selectableCollector)).toEqual(true);(matched).toEqual([s1[0], 1, s2[0], 2]););(matcher.match(  getSelectorFor({attrs: [['someAttr', 'someValue'], ['someAttr2', '']]}),  selectableCollector)).toEqual(true);(matched).toEqual([s1[0], 1, s2[0], 2]););(matcher.match(  getSelectorFor({attrs: [['someAttr2', ''], ['someAttr', 'someValue']]}),  selectableCollector)).toEqual(true);(matched).toEqual([s1[0], 1, s2[0], 2]););(matcher.match(  getSelectorFor({attrs: [['someAttr2', 'someValue'], ['someAttr', '']]}),  selectableCollector)).toEqual(true);(matched).toEqual([s1[0], 1, s2[0], 2]);    });    it('should support "." in attribute names', () => {r.addSelectables(s1 = CssSelector.parse('[foo.bar]'), 1);(matcher.match(getSelectorFor({attrs: [['barfoo', '']]}), selectableCollector)).toEqual(false);(matched).toEqual([]););(matcher.match(getSelectorFor({attrs: [['foo.bar', '']]}), selectableCollector)).toEqual(true);(matched).toEqual([s1[0], 1]);    });    it('should support "$" in attribute names', () => {r.addSelectables(s1 = CssSelector.parse('[someAttr\\$]'), 1);(matcher.match(getSelectorFor({attrs: [['someAttr', '']]}), selectableCollector)).toEqual(false);(matched).toEqual([]););(matcher.match(getSelectorFor({attrs: [['someAttr$', '']]}), selectableCollector)).toEqual(true);(matched).toEqual([s1[0], 1]););r.addSelectables(s1 = CssSelector.parse('[some\\$attr]'), 1);(matcher.match(getSelectorFor({attrs: [['someattr', '']]}), selectableCollector)).toEqual(false);(matched).toEqual([]);(matcher.match(getSelectorFor({attrs: [['some$attr', '']]}), selectableCollector)).toEqual(true);(matched).toEqual([s1[0], 1]););r.addSelectables(s1 = CssSelector.parse('[\\$someAttr]'), 1);(matcher.match(getSelectorFor({attrs: [['someAttr', '']]}), selectableCollector)).toEqual(false);(matched).toEqual([]);(matcher.match(getSelectorFor({attrs: [['$someAttr', '']]}), selectableCollector)).toEqual(true);(matched).toEqual([s1[0], 1]););r.addSelectables(s1 = CssSelector.parse('[some-\\$Attr]'), 1);r.addSelectables(s2 = CssSelector.parse('[some-\\$Attr][some-\\$-attr]'), 2);(matcher.match(getSelectorFor({attrs: [['some\\$Attr', '']]}), selectableCollector)).toEqual(false);(matched).toEqual([]);(matcher.match(  getSelectorFor({attrs: [['some-$-attr', 'someValue'], ['some-$Attr', '']]}),  selectableCollector)).toEqual(true);(matched).toEqual([s1[0], 1, s2[0], 2]););(matcher.match(getSelectorFor({attrs: [['someattr$', '']]}), selectableCollector)).toEqual(false);(matched).toEqual([]);(matcher.match(  getSelectorFor({attrs: [['some-simple-attr', '']]}), selectableCollector)).toEqual(false);(matched).toEqual([]););    });    it('should select by attr name only once if the value is from the DOM', () => {r.addSelectables(s1 = CssSelector.parse('[some-decor]'), 1);elementSelector = new CssSelector();element = el('<div attr></div>');empty = element.getAttribute('attr')!;tSelector.addAttribute('some-decor', empty);r.match(elementSelector, selectableCollector);(matched).toEqual([s1[0], 1]);    });    it('should select by attr name case sensitive and value case insensitive', () => {r.addSelectables(s1 = CssSelector.parse('[someAttr=someValue]'), 1);(matcher.match(  getSelectorFor({attrs: [['SOMEATTR', 'SOMEOTHERATTR']]}), selectableCollector)).toEqual(false);(matched).toEqual([]);(matcher.match(getSelectorFor({attrs: [['SOMEATTR', 'SOMEVALUE']]}), selectableCollector)).toEqual(false);(matched).toEqual([]);(matcher.match(getSelectorFor({attrs: [['someAttr', 'SOMEVALUE']]}), selectableCollector)).toEqual(true);(matched).toEqual([s1[0], 1]);    });    it('should select by element name, class name and attribute name with value', () => {r.addSelectables(s1 = CssSelector.parse('someTag.someClass[someAttr=someValue]'), 1);(matcher.match(   getSelectorFor(   {tag: 'someOtherTag', classes: 'someOtherClass', attrs: [['someOtherAttr', '']]}),   selectableCollector)).toEqual(false);(matched).toEqual([]);(matcher.match(  getSelectorFor('someTag', classes: 'someOtherClass', attrs: [['someOtherAttr', '']]}),  selectableCollector)).toEqual(false);(matched).toEqual([]);(matcher.match(  getSelectorFor('someTag', classes: 'someClass', attrs: [['someOtherAttr', '']]}),  selectableCollector)).toEqual(false);(matched).toEqual([]);(matcher.match(  getSelectorFor({tag: 'someTag', classes: 'someClass', attrs: [['someAttr', '']]}),  selectableCollector)).toEqual(false);(matched).toEqual([]);(matcher.match(  getSelectorFor('someTag', classes: 'someClass', attrs: [['someAttr', 'someValue']]}),  selectableCollector)).toEqual(true);(matched).toEqual([s1[0], 1]);    });    it('should select by many attributes and independent of the value', () => {r.addSelectables(s1 = CssSelector.parse('input[type=text][control]'), 1);cssSelector = new CssSelector();ector.setElement('input');ector.addAttribute('type', 'text');ector.addAttribute('control', 'one');(matcher.match(cssSelector, selectableCollector)).toEqual(true);(matched).toEqual([s1[0], 1]);    });    it('should select independent of the order in the css selector', () => {r.addSelectables(s1 = CssSelector.parse('[someAttr].someClass'), 1);r.addSelectables(s2 = CssSelector.parse('.someClass[someAttr]'), 2);r.addSelectables(s3 = CssSelector.parse('.class1.class2'), 3);r.addSelectables(s4 = CssSelector.parse('.class2.class1'), 4);(matcher.match(CssSelector.parse('[someAttr].someClass')[0], selectableCollector)).toEqual(true);(matched).toEqual([s1[0], 1, s2[0], 2]););(matcher.match(CssSelector.parse('.someClass[someAttr]')[0], selectableCollector)).toEqual(true);(matched).toEqual([s1[0], 1, s2[0], 2]););(matcher.match(CssSelector.parse('.class1.class2')[0], selectableCollector)).toEqual(true);(matched).toEqual([s3[0], 3, s4[0], 4]););(matcher.match(CssSelector.parse('.class2.class1')[0], selectableCollector)).toEqual(true);(matched).toEqual([s4[0], 4, s3[0], 3]);    });    it('should not select with a matching :not selector', () => {r.addSelectables(CssSelector.parse('p:not(.someClass)'), 1);r.addSelectables(CssSelector.parse('p:not([someAttr])'), 2);r.addSelectables(CssSelector.parse(':not(.someClass)'), 3);r.addSelectables(CssSelector.parse(':not(p)'), 4);r.addSelectables(CssSelector.parse(':not(p[someAttr])'), 5);(matcher.match(  getSelectorFor({tag: 'p', classes: 'someClass', attrs: [['someAttr', '']]}),  selectableCollector)).toEqual(false);(matched).toEqual([]);    });    it('should select with a non matching :not selector', () => {r.addSelectables(s1 = CssSelector.parse('p:not(.someClass)'), 1);r.addSelectables(s2 = CssSelector.parse('p:not(.someOtherClass[someAttr])'), 2);r.addSelectables(s3 = CssSelector.parse(':not(.someClass)'), 3);r.addSelectables(s4 = CssSelector.parse(':not(.someOtherClass[someAttr])'), 4);(matcher.match(   getSelectorFor({tag: 'p', attrs: [['someOtherAttr', '']], classes: 'someOtherClass'}),   selectableCollector)).toEqual(true);(matched).toEqual([s1[0], 1, s2[0], 2, s3[0], 3, s4[0], 4]);    });    it('should match * with :not selector', () => {r.addSelectables(CssSelector.parse(':not([a])'), 1);(matcher.match(getSelectorFor({tag: 'div'}), () => {})).toEqual(true);    });    it('should match with multiple :not selectors', () => {r.addSelectables(s1 = CssSelector.parse('div:not([a]):not([b])'), 1);(matcher.match(getSelectorFor({tag: 'div', attrs: [['a', '']]}), selectableCollector)).toBe(false);(matcher.match(getSelectorFor({tag: 'div', attrs: [['b', '']]}), selectableCollector)).toBe(false);(matcher.match(getSelectorFor({tag: 'div', attrs: [['c', '']]}), selectableCollector)).toBe(true);    });    it('should select with one match in a list', () => {r.addSelectables(s1 = CssSelector.parse('input[type=text], textbox'), 1);(matcher.match(getSelectorFor({tag: 'textbox'}), selectableCollector)).toEqual(true);(matched).toEqual([s1[1], 1]););(matcher.match(  getSelectorFor({tag: 'input', attrs: [['type', 'text']]}), selectableCollector)).toEqual(true);(matched).toEqual([s1[0], 1]);    });    it('should not select twice with two matches in a list', () => {r.addSelectables(s1 = CssSelector.parse('input, .someClass'), 1);(matcher.match(getSelectorFor({tag: 'input', classes: 'someclass'}), selectableCollector)).toEqual(true);(matched.length).toEqual(2);(matched).toEqual([s1[0], 1]);    });  });  describe('CssSelector.parse', () => {    it('should detect element names', () => {cssSelector = CssSelector.parse('sometag')[0];(cssSelector.element).toEqual('sometag');(cssSelector.toString()).toEqual('sometag');    });    it('should detect attr names with escaped $', () => {sSelector = CssSelector.parse('[attrname\\$]')[0];(cssSelector.attrs).toEqual(['attrname$', '']);(cssSelector.toString()).toEqual('[attrname\\$]');ector = CssSelector.parse('[\\$attrname]')[0];(cssSelector.attrs).toEqual(['$attrname', '']);(cssSelector.toString()).toEqual('[\\$attrname]');ector = CssSelector.parse('[foo\\$bar]')[0];(cssSelector.attrs).toEqual(['foo$bar', '']);(cssSelector.toString()).toEqual('[foo\\$bar]');    });    it('should error on attr names with unescaped $', () => {(() => CssSelector.parse('[attrname$]')).toThrowError(   'Error in attribute selector "attrname$". Unescaped "$" is not supported. Please escape with "\\$".');(() => CssSelector.parse('[$attrname]')).toThrowError(   'Error in attribute selector "$attrname". Unescaped "$" is not supported. Please escape with "\\$".');(() => CssSelector.parse('[foo$bar]')).toThrowError(   'Error in attribute selector "foo$bar". Unescaped "$" is not supported. Please escape with "\\$".');(() => CssSelector.parse('[foo\\$bar$]')).toThrowError(   'Error in attribute selector "foo\\$bar$". Unescaped "$" is not supported. Please escape with "\\$".');    });    it('should detect class names', () => {cssSelector = CssSelector.parse('.someClass')[0];(cssSelector.classNames).toEqual(['someclass']);(cssSelector.toString()).toEqual('.someclass');    });    it('should detect attr names', () => {cssSelector = CssSelector.parse('[attrname]')[0];(cssSelector.attrs).toEqual(['attrname', '']);(cssSelector.toString()).toEqual('[attrname]');    });    it('should detect attr values', () => {cssSelector = CssSelector.parse('[attrname=attrvalue]')[0];(cssSelector.attrs).toEqual(['attrname', 'attrvalue']);(cssSelector.toString()).toEqual('[attrname=attrvalue]');    });    it('should detect attr values with double quotes', () => {cssSelector = CssSelector.parse('[attrname="attrvalue"]')[0];(cssSelector.attrs).toEqual(['attrname', 'attrvalue']);(cssSelector.toString()).toEqual('[attrname=attrvalue]');    });    it('should detect #some-value syntax and treat as attribute', () => {cssSelector = CssSelector.parse('#some-value')[0];(cssSelector.attrs).toEqual(['id', 'some-value']);(cssSelector.toString()).toEqual('[id=some-value]');    });    it('should detect attr values with single quotes', () => {cssSelector = CssSelector.parse('[attrname=\'attrvalue\']')[0];(cssSelector.attrs).toEqual(['attrname', 'attrvalue']);(cssSelector.toString()).toEqual('[attrname=attrvalue]');    });    it('should detect multiple parts', () => {cssSelector = CssSelector.parse('sometag[attrname=attrvalue].someclass')[0];(cssSelector.element).toEqual('sometag');(cssSelector.attrs).toEqual(['attrname', 'attrvalue']);(cssSelector.classNames).toEqual(['someclass']);(cssSelector.toString()).toEqual('sometag.someclass[attrname=attrvalue]');    });    it('should detect multiple attributes', () => {cssSelector = CssSelector.parse('input[type=text][control]')[0];(cssSelector.element).toEqual('input');(cssSelector.attrs).toEqual(['type', 'text', 'control', '']);(cssSelector.toString()).toEqual('input[type=text][control]');    });    it('should detect :not', () => {cssSelector = CssSelector.parse('sometag:not([attrname=attrvalue].someclass)')[0];(cssSelector.element).toEqual('sometag');(cssSelector.attrs.length).toEqual(0);(cssSelector.classNames.length).toEqual(0);notSelector = cssSelector.notSelectors[0];(notSelector.element).toEqual(null);(notSelector.attrs).toEqual(['attrname', 'attrvalue']);(notSelector.classNames).toEqual(['someclass']);(cssSelector.toString()).toEqual('sometag:not(.someclass[attrname=attrvalue])');    });    it('should detect :not without truthy', () => {cssSelector = CssSelector.parse(':not([attrname=attrvalue].someclass)')[0];(cssSelector.element).toEqual('*');notSelector = cssSelector.notSelectors[0];(notSelector.attrs).toEqual(['attrname', 'attrvalue']);(notSelector.classNames).toEqual(['someclass']);(cssSelector.toString()).toEqual('*:not(.someclass[attrname=attrvalue])');    });    it('should throw when nested :not', () => {(() => {elector.parse('sometag:not(:not([attrname=attrvalue].someclass))')[0];hrowError('Nesting :not in a selector is not allowed');    });    it('should throw when multiple selectors in :not', () => {(() => {elector.parse('sometag:not(a,b)');hrowError('Multiple selectors in :not are not supported');    });    it('should detect lists of selectors', () => {cssSelectors = CssSelector.parse('.someclass,[attrname=attrvalue], sometag');(cssSelectors.length).toEqual(3);(cssSelectors[0].classNames).toEqual(['someclass']);(cssSelectors[1].attrs).toEqual(['attrname', 'attrvalue']);(cssSelectors[2].element).toEqual('sometag');    });    it('should detect lists of selectors with :not', () => {cssSelectors =CssSelector.parse('input[type=text], :not(textarea), textbox:not(.special)');(cssSelectors.length).toEqual(3);(cssSelectors[0].element).toEqual('input');(cssSelectors[0].attrs).toEqual(['type', 'text']);(cssSelectors[1].element).toEqual('*');(cssSelectors[1].notSelectors[0].element).toEqual('textarea');(cssSelectors[2].element).toEqual('textbox');(cssSelectors[2].notSelectors[0].classNames).toEqual(['special']);    });  });}function getSelectorFor(    {tag = '', attrs = [], classes = ''}: {tag?: string, attrs?: any[], classes?: string} = {}):    CssSelector {  const selector = new CssSelector();  selector.setElement(tag);  attrs.forEach(nameValue => {    selector.addAttribute(nameValue[0], nameValue[1]);  });  classes.trim().split(/\s+/g).forEach(cName => {    selector.addClassName(cName);  });  return selector;}