/** * @license * Copyright Google LLC All Rights Reserved. * * Use of this source code is governed by an MIT-style license that can be * found in the LICENSE file at https://angular.io/license */import * as html from '../../src/ml_parser/ast';import {HtmlParser} from '../../src/ml_parser/html_parser';import {expandNodes, ExpansionResult} from '../../src/ml_parser/icu_ast_expander';import {TokenizeOptions} from '../../src/ml_parser/lexer';import {ParseError} from '../../src/parse_util';import {humanizeNodes} from './ast_spec_utils';{  describe('Expander', () => {    function expand(template: string, options: TokenizeOptions = {}): ExpansionResult {htmlParser = new HtmlParser();res = htmlParser.parse(template, 'url', {tokenizeExpansionForms: true, ...options}); expandNodes(res.rootNodes);    }    it('should handle the plural expansion form', () => {res = expand(`{messages.length, plural,=0 {zero<b>bold</b>}}`);(humanizeNodes(res.nodes)).toEqual([l.Element, 'ng-container', 0],l.Attribute, '[ngPlural]', 'messages.length'],l.Element, 'ng-template', 1],l.Attribute, 'ngPluralCase', '=0'],l.Text, 'zero', 2, ['zero']],l.Element, 'b', 2],l.Text, 'bold', 3, ['bold']],    });    it('should handle nested expansion forms', () => {res = expand(`{messages.length, plural, =0 { {p.gender, select, male {m}} }}`);(humanizeNodes(res.nodes)).toEqual([l.Element, 'ng-container', 0],l.Attribute, '[ngPlural]', 'messages.length'],l.Element, 'ng-template', 1],l.Attribute, 'ngPluralCase', '=0'],l.Element, 'ng-container', 2],l.Attribute, '[ngSwitch]', 'p.gender'],l.Element, 'ng-template', 3],l.Attribute, 'ngSwitchCase', 'male'],l.Text, 'm', 4, ['m']],l.Text, ' ', 2, [' ']],    });    it('should correctly set source code positions', () => {nodes = expand(`{messages.length, plural,=0 {<b>bold</b>}}`).nodes;container: html.Element = <html.Element>nodes[0];(container.sourceSpan.start.col).toEqual(0);(container.sourceSpan.end.col).toEqual(42);(container.startSourceSpan.start.col).toEqual(0);(container.startSourceSpan.end.col).toEqual(42);(container.endSourceSpan!.start.col).toEqual(0);(container.endSourceSpan!.end.col).toEqual(42);switchExp = container.attrs[0];(switchExp.sourceSpan.start.col).toEqual(1);(switchExp.sourceSpan.end.col).toEqual(16);template: html.Element = <html.Element>container.children[0];(template.sourceSpan.start.col).toEqual(25);(template.sourceSpan.end.col).toEqual(41);switchCheck = template.attrs[0];(switchCheck.sourceSpan.start.col).toEqual(25);(switchCheck.sourceSpan.end.col).toEqual(28);b: html.Element = <html.Element>template.children[0];(b.sourceSpan.start.col).toEqual(29);(b.endSourceSpan!.end.col).toEqual(40);    });    it('should handle other special forms', () => {res = expand(`{person.gender, select, male {m} other {default}}`);(humanizeNodes(res.nodes)).toEqual([l.Element, 'ng-container', 0],l.Attribute, '[ngSwitch]', 'person.gender'],l.Element, 'ng-template', 1],l.Attribute, 'ngSwitchCase', 'male'],l.Text, 'm', 2, ['m']],l.Element, 'ng-template', 1],l.Attribute, 'ngSwitchDefault', ''],l.Text, 'default', 2, ['default']],    });    it('should parse an expansion form as a tag single child', () => {res = expand(`<div><span>{a, b, =4 {c}}</span></div>`);(humanizeNodes(res.nodes)).toEqual([l.Element, 'div', 0],l.Element, 'span', 1],l.Element, 'ng-container', 2],l.Attribute, '[ngSwitch]', 'a'],l.Element, 'ng-template', 3],l.Attribute, 'ngSwitchCase', '=4'],l.Text, 'c', 4, ['c']],    });    it('should parse an expansion forms inside of blocks', () => {res =expand('{#if cond}{a, b, =4 {c}}{:else}{d, e, =4 {f}}{/if}', {tokenizeBlocks: true});(humanizeNodes(res.nodes)).toEqual([l.BlockGroup, 0],l.Block, 'if', 1],l.BlockParameter, 'cond'],l.Element, 'ng-container', 2],l.Attribute, '[ngSwitch]', 'a'],l.Element, 'ng-template', 3],l.Attribute, 'ngSwitchCase', '=4'],l.Text, 'c', 4, ['c']],l.Block, 'else', 1],l.Element, 'ng-container', 2],l.Attribute, '[ngSwitch]', 'd'],l.Element, 'ng-template', 3],l.Attribute, 'ngSwitchCase', '=4'],l.Text, 'f', 4, ['f']],    });    describe('errors', () => {ould error on unknown plural cases', () => {ct(humanizeErrors(expand('{n, plural, unknown {-}}').errors)).toEqual([`Plural cases should be "=<number>" or one of zero, one, two, few, many, other`,    });  });}function humanizeErrors(errors: ParseError[]): string[] {  return errors.map(error => error.msg);}