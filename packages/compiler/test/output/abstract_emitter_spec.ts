/** * @license * Copyright Google LLC All Rights Reserved. * * Use of this source code is governed by an MIT-style license that can be * found in the LICENSE file at https://angular.io/license */import {escapeIdentifier} from '@angular/compiler/src/output/abstract_emitter';{  describe('AbstractEmitter', () => {    describe('escapeIdentifier', () => {ould escape single quotes', () => {ct(escapeIdentifier(`'`, false)).toEqual(`'\\''`);ould escape backslash', () => {ct(escapeIdentifier('\\', false)).toEqual(`'\\\\'`);ould escape newlines', () => {ct(escapeIdentifier('\n', false)).toEqual(`'\\n'`);ould escape carriage returns', () => {ct(escapeIdentifier('\r', false)).toEqual(`'\\r'`);ould escape $', () => {ct(escapeIdentifier('$', true)).toEqual(`'\\$'`);ould not escape $', () => {ct(escapeIdentifier('$', false)).toEqual(`'$'`);ould add quotes for non-identifiers', () => {ct(escapeIdentifier('==', false, false)).toEqual(`'=='`);es not escape class (but it probably should)', () => {ct(escapeIdentifier('class', false, false)).toEqual('class');    });  });}export function stripSourceMapAndNewLine(source: string): string {  if (source.endsWith('\n')) {    source = source.substring(0, source.length - 1);  }  const smi = source.lastIndexOf('\n//#');  if (smi == -1) return source;  return source.slice(0, smi);}