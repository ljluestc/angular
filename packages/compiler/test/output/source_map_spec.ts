/** * @license * Copyright Google LLC All Rights Reserved. * * Use of this source code is governed by an MIT-style license that can be * found in the LICENSE file at https://angular.io/license */import {SourceMapGenerator, toBase64String} from '@angular/compiler/src/output/source_map';{  describe('source map generation', () => {    describe('generation', () => {ould generate a valid source map', () => {t map = new SourceMapGenerator('out.js')e('a.js', null))ng(0, 'a.js', 0, 0)ng(4, 'a.js', 0, 6)ng(5, 'a.js', 0, 7)ng(8, 'a.js', 0, 22)ng(9, 'a.js', 0, 23)ng(10, 'a.js', 0, 24))ng(0, 'a.js', 1, 0)ng(4, 'a.js', 1, 6)ng(5, 'a.js', 1, 7)ng(8, 'a.js', 1, 10)ng(9, 'a.js', 1, 11)ng(10, 'a.js', 1, 12))ng(0, 'a.js', 3, 0)ng(2, 'a.js', 3, 2)ng(3, 'a.js', 3, 3)ng(10, 'a.js', 3, 10)ng(11, 'a.js', 3, 11)ng(21, 'a.js', 3, 11)ng(22, 'a.js', 3, 12))ng(4, 'a.js', 4, 4)ng(11, 'a.js', 4, 11)ng(12, 'a.js', 4, 12)ng(15, 'a.js', 4, 15)ng(16, 'a.js', 4, 16)ng(21, 'a.js', 4, 21)ng(22, 'a.js', 4, 22)ng(23, 'a.js', 4, 23))ng(0, 'a.js', 5, 0)ng(1, 'a.js', 5, 1)ng(2, 'a.js', 5, 2)ng(3, 'a.js', 5, 2);enerated with https://sokra.github.io/source-map-visualization using a TS source mapct(map.toJSON()!.mappings) .toEqual( 'AAAA,IAAM,CAAC,GAAe,CAAC,CAAC;AACxB,IAAM,CAAC,GAAG,CAAC,CAAC;AAEZ,EAAE,CAAC,OAAO,CAAC,UAAA,CAAC;IACR,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AACvB,CAAC,CAAC,CAAA');ould include the files and their contents', () => {t map = new SourceMapGenerator('out.js')e('inline.ts', 'inline')e('inline.ts', 'inline')  // make sur the sources are dedupe('url.ts', null))ng(0, 'inline.ts', 0, 0)!;ct(map.file).toEqual('out.js');ct(map.sources).toEqual(['inline.ts', 'url.ts']);ct(map.sourcesContent).toEqual(['inline', null]);ould not generate source maps when there is no mapping', () => {t smg = new SourceMapGenerator('out.js').addSource('inline.ts', 'inline').addLine();ct(smg.toJSON()).toEqual(null);ct(smg.toJsComment()).toEqual('');    });    describe('encodeB64String', () => {ould return the b64 encoded value', () => {, ''],=='],Rm9v'],'Rm9vMQ=='], 'Rm9vMTI='],, 'Rm9vMTIz'],rEach(([src, b64]) => expect(toBase64String(src)).toEqual(b64));    });    describe('errors', () => {ould throw when mappings are added out of order', () => {ct(() => {new SourceMapGenerator('out.js')   .addSource('in.js')   .addLine()   .addMapping(10, 'in.js', 0, 0)   .addMapping(0, 'in.js', 0, 0);oThrowError('Mapping should be added in output order');ould throw when adding segments before any line is created', () => {ct(() => {new SourceMapGenerator('out.js').addSource('in.js').addMapping(0, 'in.js', 0, 0);oThrowError('A line must be added before mappings can be added');ould throw when adding segments referencing unknown sources', () => {ct(() => {new SourceMapGenerator('out.js').addSource('in.js').addLine().addMapping(   0, 'in_.js', 0, 0);oThrowError('Unknown source file "in_.js"');ould throw when adding segments without column', () => {ct(() => {new SourceMapGenerator('out.js').addSource('in.js').addLine().addMapping(null!);oThrowError('The column in the generated code must be provided');ould throw when adding segments with a source url but no position', () => {ct(() => {new SourceMapGenerator('out.js').addSource('in.js').addLine().addMapping(0, 'in.js');oThrowError('The source location must be provided when a source url is provided');ct(() => {new SourceMapGenerator('out.js').addSource('in.js').addLine().addMapping(0, 'in.js', 0);oThrowError('The source location must be provided when a source url is provided');    });  });}