/** * @license * Copyright Google LLC All Rights Reserved. * * Use of this source code is governed by an MIT-style license that can be * found in the LICENSE file at https://angular.io/license */import {ShadowCss} from '@angular/compiler/src/shadow_css';export function shim(css: string, contentAttr: string, hostAttr: string = '') {  const shadowCss = new ShadowCss();  return shadowCss.shimCssText(css, contentAttr, hostAttr);}const shadowCssMatchers: jasmine.CustomMatcherFactories = {  toEqualCss: function(): jasmine.CustomMatcher {    return {e: function(actual: string, expected: string): jasmine.CustomMatcherResult {t actualCss = extractCssContent(actual);t expectedCss = extractCssContent(expected);t passes = actualCss === expectedCss;rn {pass: passes,message: passes ? 'CSS equals as expected' :  `Expected '${actualCss}' to equal '${expectedCss}'`,    };  }};function extractCssContent(css: string): string {  return css.replace(/^\n\s+/, '')ce(/\n\s+$/, '')ce(/\s+/g, ' ')ce(/:\s/g, ':')ce(/ }/g, '}');}beforeEach(function() {  jasmine.addMatchers(shadowCssMatchers);});declare global {  module jasmine {    interface Matchers<T> {ect the actual css value to be equal to the expected css, this comparison extra spacing and newlines are ignored sot only the core css content is being compared.lCss(expected: string): void;    }  }}