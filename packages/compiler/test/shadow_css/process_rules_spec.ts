/** * @license * Copyright Google LLC All Rights Reserved. * * Use of this source code is governed by an MIT-style license that can be * found in the LICENSE file at https://angular.io/license */import {CssRule, processRules} from '@angular/compiler/src/shadow_css';describe('ShadowCss, processRules', () => {  describe('parse rules', () => {    function captureRules(input: string): CssRule[] {result: CssRule[] = [];sRules(input, (cssRule) => {lt.push(cssRule);rn cssRule; result;    }    it('should work with empty css', () => {(captureRules('')).toEqual([]);    });    it('should capture a rule without body', () => {(captureRules('a;')).toEqual([new CssRule('a', '')]);    });    it('should capture css rules with body', () => {(captureRules('a {b}')).toEqual([new CssRule('a', 'b')]);    });    it('should capture css rules with nested rules', () => {(captureRules('a {b {c}} d {e}')).toEqual([CssRule('a', 'b {c}'),CssRule('d', 'e'),    });    it('should capture multiple rules where some have no body', () => {(captureRules('@import a ; b {c}')).toEqual([CssRule('@import a', ''),CssRule('b', 'c'),    });  });  describe('modify rules', () => {    it('should allow to change the selector while preserving whitespaces', () => {(processRules(  '@import a; b {c {d}} e {f}',  (cssRule: CssRule) => new CssRule(cssRule.selector + '2', cssRule.content))).toEqual('@import a2; b2 {c {d}} e2 {f}');    });    it('should allow to change the content', () => {(processRules(   'a {b}', (cssRule: CssRule) => new CssRule(cssRule.selector, cssRule.content + '2'))).toEqual('a {b2}');    });  });});