/** * @license * Copyright Google LLC All Rights Reserved. * * Use of this source code is governed by an MIT-style license that can be * found in the LICENSE file at https://angular.io/license */import {shim} from './utils';describe('ShadowCss, at-rules', () => {  describe('@media', () => {    it('should handle media rules with simple rules', () => {css = '@media screen and (max-width: 800px) {div {font-size: 50px;}} div {}';expected ='@media screen and (max-width:800px) {div[contenta] {font-size:50px;}} div[contenta] {}';(shim(css, 'contenta')).toEqualCss(expected);    });    it('should handle media rules with both width and height', () => {css = '@media screen and (max-width:800px, max-height:100%) {div {font-size:50px;}}';expected ='@media screen and (max-width:800px, max-height:100%) {div[contenta] {font-size:50px;}}';(shim(css, 'contenta')).toEqualCss(expected);    });  });  describe('@page', () => {    // @page rules use a special set of at-rules and selectors and they can't be scoped.    // See: https://www.w3.org/TR/css-page-3    it('should preserve @page rules', () => {contentAttr = 'contenta';css = `e {margin-right: 4in;@top-left { content: "Hamlet";}@top-right { content: "Page " counter(page);}e main {margin-left: 4in;e :left {margin-left: 3cm;margin-right: 4cm;e :right {margin-left: 4cm;margin-right: 3cm;result = shim(css, contentAttr);(result).toEqualCss(css);(result).not.toContain(contentAttr);    });    it('should strip ::ng-deep and :host from within @page rules', () => {(shim('@page { margin-right: 4in; }', 'contenta', 'h')).toEqualCss('@page { margin-right:4in;}');(shim('@page { ::ng-deep @top-left { content: "Hamlet";}}', 'contenta', 'h')).toEqualCss('@page { @top-left { content:"Hamlet";}}');(shim('@page { :host ::ng-deep @top-left { content:"Hamlet";}}', 'contenta', 'h')).toEqualCss('@page { @top-left { content:"Hamlet";}}');    });  });  describe('@supports', () => {    it('should handle support rules', () => {css = '@supports (display: flex) {section {display: flex;}}';expected = '@supports (display:flex) {section[contenta] {display:flex;}}';(shim(css, 'contenta')).toEqualCss(expected);    });    it('should strip ::ng-deep and :host from within @supports', () => {(shim(  '@supports (display: flex) { @font-face { :host ::ng-deep font-family{} } }',  'contenta', 'h')).toEqualCss('@supports (display:flex) { @font-face { font-family{}}}');    });  });  describe('@font-face', () => {    it('should strip ::ng-deep and :host from within @font-face', () => {(shim('@font-face { font-family {} }', 'contenta', 'h')).toEqualCss('@font-face { font-family {}}');(shim('@font-face { ::ng-deep font-family{} }', 'contenta', 'h')).toEqualCss('@font-face { font-family{}}');(shim('@font-face { :host ::ng-deep font-family{} }', 'contenta', 'h')).toEqualCss('@font-face { font-family{}}');    });  });  describe('@import', () => {    it('should pass through @import directives', () => {styleStr = '@import url("https://fonts.googleapis.com/css?family=Roboto");';css = shim(styleStr, 'contenta');(css).toEqualCss(styleStr);    });    it('should shim rules after @import', () => {styleStr = '@import url("a"); div {}';css = shim(styleStr, 'contenta');(css).toEqualCss('@import url("a"); div[contenta] {}');    });    it('should shim rules with quoted content after @import', () => {styleStr = '@import url("a"); div {background-image: url("a.jpg"); color: red;}';css = shim(styleStr, 'contenta');(css).toEqualCss('@import url("a"); div[contenta] {background-image:url("a.jpg"); color:red;}');    });    it('should pass through @import directives whose URL contains colons and semicolons', () => {styleStr ='@import url("https://fonts.googleapis.com/css2?family=Roboto:wght@400;500&display=swap");';css = shim(styleStr, 'contenta');(css).toEqualCss(styleStr);    });    it('should shim rules after @import with colons and semicolons', () => {styleStr ='@import url("https://fonts.googleapis.com/css2?family=Roboto:wght@400;500&display=swap"); div {}';css = shim(styleStr, 'contenta');(css).toEqualCss('@import url("https://fonts.googleapis.com/css2?family=Roboto:wght@400;500&display=swap"); div[contenta] {}');    });  });  describe('@container', () => {    it('should scope normal selectors inside an unnamed container rules', () => {css = `@container max(max-width: 500px) {.item {  color: red;}  }`;result = shim(css, 'host-a');(result).toEqualCss(`tainer max(max-width: 500px) {.item[host-a] {  color: red;}    });    it('should scope normal selectors inside a named container rules', () => {css = `@container container max(max-width: 500px) {.item {  color: red;}}`;result = shim(css, 'host-a');e that for the time being we are not scoping the container name itself,s is something that may or may not be done in the future dependinghow the css specs evolve. Currently as of Chrome 107 it looks like shadowDomndaries don't effect container queries (thus the scoping wouldn't be needed) this aspect of container queries seems to be still under active discussion:ps://github.com/w3c/csswg-drafts/issues/5984(result).toEqualCss(`tainer container max(max-width: 500px) {.item[host-a] { color: red;}    });  });  describe('@scope', () => {    it('should scope normal selectors inside a scope rule with scoping limits', () => {css = `@scope (.media-object) to (.content > *) {   img { border-radius: 50%; }   .content { padding: 1em; }}`;result = shim(css, 'host-a');(result).toEqualCss(`pe (.media-object) to (.content > *) {img[host-a] { border-radius: 50%; }.content[host-a] { padding: 1em; }    });    it('should scope normal selectors inside a scope rule', () => {css = `@scope (.light-scheme) {   a { color: darkmagenta; }}`;result = shim(css, 'host-a');(result).toEqualCss(`pe (.light-scheme) {a[host-a] { color: darkmagenta; }    });  });  describe('@document', () => {    it('should handle document rules', () => {css = '@document url(http://www.w3.org/) {div {font-size:50px;}}';expected = '@document url(http://www.w3.org/) {div[contenta] {font-size:50px;}}';(shim(css, 'contenta')).toEqualCss(expected);    });  });  describe('@layer', () => {    it('should handle layer rules', () => {css = '@layer utilities {section {display: flex;}}';expected = '@layer utilities {section[contenta] {display:flex;}}';(shim(css, 'contenta')).toEqualCss(expected);    });  });});