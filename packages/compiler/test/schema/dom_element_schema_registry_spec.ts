/** * @license * Copyright Google LLC All Rights Reserved. * * Use of this source code is governed by an MIT-style license that can be * found in the LICENSE file at https://angular.io/license */import {DomElementSchemaRegistry} from '@angular/compiler/src/schema/dom_element_schema_registry';import {CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA, SecurityContext} from '@angular/core';import {Element} from '../../src/ml_parser/ast';import {HtmlParser} from '../../src/ml_parser/html_parser';import {extractSchema} from './schema_extractor';{  describe('DOMElementSchema', () => {    let registry: DomElementSchemaRegistry;    beforeEach(() => {ry = new DomElementSchemaRegistry();    });    it('should detect elements', () => {(registry.hasElement('div', [])).toBeTruthy();(registry.hasElement('b', [])).toBeTruthy();(registry.hasElement('ng-container', [])).toBeTruthy();(registry.hasElement('ng-content', [])).toBeTruthy();(registry.hasElement('my-cmp', [])).toBeFalsy();(registry.hasElement('abc', [])).toBeFalsy();    });    // https://github.com/angular/angular/issues/11219    it('should detect elements missing from chrome', () => {(registry.hasElement('data', [])).toBeTruthy();(registry.hasElement('menuitem', [])).toBeTruthy();(registry.hasElement('summary', [])).toBeTruthy();(registry.hasElement('time', [])).toBeTruthy();    });    it('should detect properties on regular elements', () => {(registry.hasProperty('div', 'id', [])).toBeTruthy();(registry.hasProperty('div', 'title', [])).toBeTruthy();(registry.hasProperty('h1', 'align', [])).toBeTruthy();(registry.hasProperty('h2', 'align', [])).toBeTruthy();(registry.hasProperty('h3', 'align', [])).toBeTruthy();(registry.hasProperty('h4', 'align', [])).toBeTruthy();(registry.hasProperty('h5', 'align', [])).toBeTruthy();(registry.hasProperty('h6', 'align', [])).toBeTruthy();(registry.hasProperty('h7', 'align', [])).toBeFalsy();(registry.hasProperty('textarea', 'disabled', [])).toBeTruthy();(registry.hasProperty('input', 'disabled', [])).toBeTruthy();(registry.hasProperty('div', 'unknown', [])).toBeFalsy();    });    // https://github.com/angular/angular/issues/11219    it('should detect properties on elements missing from Chrome', () => {(registry.hasProperty('data', 'value', [])).toBeTruthy();(registry.hasProperty('menuitem', 'type', [])).toBeTruthy();(registry.hasProperty('menuitem', 'default', [])).toBeTruthy();(registry.hasProperty('time', 'dateTime', [])).toBeTruthy();    });    it('should detect different kinds of types', () => {eritance: video => media => [HTMLElement] => [Element](registry.hasProperty('video', 'className', [])).toBeTruthy();   // from [Element](registry.hasProperty('video', 'id', [])).toBeTruthy();// string(registry.hasProperty('video', 'scrollLeft', [])).toBeTruthy();  // number(registry.hasProperty('video', 'height', [])).toBeTruthy();// num(registry.hasProperty('video', 'autoplay', [])).toBeTruthy();    // boolean(registry.hasProperty('video', 'classList', [])).toBeTruthy();   // objectm *; but events are not properties(registry.hasProperty('video', 'click', [])).toBeFalsy();    });    it('should treat custom elements as an unknown element by default', () => {(registry.hasProperty('custom-like', 'unknown', [])).toBe(false);(registry.hasProperty('custom-like', 'className', [])).toBeTruthy();(registry.hasProperty('custom-like', 'style', [])).toBeTruthy();(registry.hasProperty('custom-like', 'id', [])).toBeTruthy();    });    it('should return true for custom-like elements if the CUSTOM_ELEMENTS_SCHEMA was used', () => {(registry.hasProperty('custom-like', 'unknown', [CUSTOM_ELEMENTS_SCHEMA])).toBeTruthy();(registry.hasElement('custom-like', [CUSTOM_ELEMENTS_SCHEMA])).toBeTruthy();    });    it('should return true for all elements if the NO_ERRORS_SCHEMA was used', () => {(registry.hasProperty('custom-like', 'unknown', [NO_ERRORS_SCHEMA])).toBeTruthy();(registry.hasProperty('a', 'unknown', [NO_ERRORS_SCHEMA])).toBeTruthy();(registry.hasElement('custom-like', [NO_ERRORS_SCHEMA])).toBeTruthy();(registry.hasElement('unknown', [NO_ERRORS_SCHEMA])).toBeTruthy();    });    it('should re-map property names that are specified in DOM facade', () => {(registry.getMappedPropName('readonly')).toEqual('readOnly');    });    it('should not re-map property names that are not specified in DOM facade', () => {(registry.getMappedPropName('title')).toEqual('title');(registry.getMappedPropName('exotic-unknown')).toEqual('exotic-unknown');    });    it('should return an error message when asserting event properties', () => {port = registry.validateProperty('onClick');(report.error).toBeTruthy();(report.msg).toEqual(   `Binding to event property 'onClick' is disallowed for security reasons, please use (Click)=...If 'onClick' is a directive input, make sure the directive is imported by the current module.`); = registry.validateProperty('onAnything');(report.error).toBeTruthy();(report.msg).toEqual(   `Binding to event property 'onAnything' is disallowed for security reasons, please use (Anything)=...If 'onAnything' is a directive input, make sure the directive is imported by the current module.`);    });    it('should return an error message when asserting event attributes', () => {port = registry.validateAttribute('onClick');(report.error).toBeTruthy();(report.msg).toEqual(   `Binding to event attribute 'onClick' is disallowed for security reasons, please use (Click)=...`); = registry.validateAttribute('onAnything');(report.error).toBeTruthy();(report.msg).toEqual(   `Binding to event attribute 'onAnything' is disallowed for security reasons, please use (Anything)=...`);    });    it('should not return an error message when asserting non-event properties or attributes', {t = registry.validateProperty('title');port.error).toBeFalsy();port.msg).not.toBeDefined();registry.validateProperty('exotic-unknown');port.error).toBeFalsy();port.msg).not.toBeDefined();    it('should return security contexts for elements', () => {(registry.securityContext('iframe', 'srcdoc', false)).toBe(SecurityContext.HTML);(registry.securityContext('p', 'innerHTML', false)).toBe(SecurityContext.HTML);(registry.securityContext('a', 'href', false)).toBe(SecurityContext.URL);(registry.securityContext('a', 'style', false)).toBe(SecurityContext.STYLE);(registry.securityContext('ins', 'cite', false)).toBe(SecurityContext.URL);(registry.securityContext('base', 'href', false)).toBe(SecurityContext.RESOURCE_URL);    });    it('should detect properties on namespaced elements', () => {htmlAst = new HtmlParser().parse('<svg:style>', 'TestComp');nodeName = (<Element>htmlAst.rootNodes[0]).name;(registry.hasProperty(nodeName, 'type', [])).toBeTruthy();    });    it('should check security contexts case insensitive', () => {(registry.securityContext('p', 'iNnErHtMl', false)).toBe(SecurityContext.HTML);(registry.securityContext('p', 'formaction', false)).toBe(SecurityContext.URL);(registry.securityContext('p', 'formAction', false)).toBe(SecurityContext.URL);    });    it('should check security contexts for attributes', () => {(registry.securityContext('p', 'innerHtml', true)).toBe(SecurityContext.HTML);(registry.securityContext('p', 'formaction', true)).toBe(SecurityContext.URL);    });    describe('Angular custom elements', () => {ould support <ng-container>', () => {ct(registry.hasProperty('ng-container', 'id', [])).toBeFalsy();ould support <ng-content>', () => {ct(registry.hasProperty('ng-content', 'id', [])).toBeFalsy();ct(registry.hasProperty('ng-content', 'select', [])).toBeFalsy();    });    if (!isNode) {nerate a new schema', () => {schema = '\n';actSchema()!.forEach((props, name) => {schema += `'${name}|${props.join(',')}',\n`;ncomment this line to see:he generated schema which can then be pasted to the DomElementSchemaRegistryonsole.log(schema);    }    describe('normalizeAnimationStyleProperty', () => {ould normalize the given CSS property to camelCase', () => {ct(registry.normalizeAnimationStyleProperty('border-radius')).toBe('borderRadius');ct(registry.normalizeAnimationStyleProperty('zIndex')).toBe('zIndex');ct(registry.normalizeAnimationStyleProperty('-webkit-animation')) .toBe('WebkitAnimation');    });    describe('normalizeAnimationStyleValue', () => {ould normalize the given dimensional CSS style value to contain a PX value when numeric',expect(registry.normalizeAnimationStyleValue('borderRadius', 'border-radius', 10)['value']).toBe('10px');ould not normalize any values that are of zero', () => {ct(registry.normalizeAnimationStyleValue('opacity', 'opacity', 0)['value']).toBe('0');ct(registry.normalizeAnimationStyleValue('width', 'width', 0)['value']).toBe('0');ould retain the given dimensional CSS style value\'s unit if it already exists', () => {ct( registry.normalizeAnimationStyleValue('borderRadius', 'border-radius', '10em')['value']) .toBe('10em');ould trim the provided CSS style value', () => {ct(registry.normalizeAnimationStyleValue('color', 'color', '   red ')['value']) .toBe('red');ould stringify all non dimensional numeric style values', () => {ct(registry.normalizeAnimationStyleValue('zIndex', 'zIndex', 10)['value']).toBe('10');ct(registry.normalizeAnimationStyleValue('opacity', 'opacity', 0.5)['value']) .toBe('0.5');    });  });}