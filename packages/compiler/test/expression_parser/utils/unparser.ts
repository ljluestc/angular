/** * @license * Copyright Google LLC All Rights Reserved. * * Use of this source code is governed by an MIT-style license that can be * found in the LICENSE file at https://angular.io/license */import {AST, AstVisitor, ASTWithSource, Binary, BindingPipe, Call, Chain, Conditional, ImplicitReceiver, Interpolation, KeyedRead, KeyedWrite, LiteralArray, LiteralMap, LiteralPrimitive, NonNullAssert, PrefixNot, PropertyRead, PropertyWrite, RecursiveAstVisitor, SafeCall, SafeKeyedRead, SafePropertyRead, ThisReceiver, Unary} from '../../../src/expression_parser/ast';import {DEFAULT_INTERPOLATION_CONFIG, InterpolationConfig} from '../../../src/ml_parser/interpolation_config';class Unparser implements AstVisitor {  private static _quoteRegExp = /"/g;  // using non-null assertion because they're both re(set) by unparse()  private _expression!: string;  private _interpolationConfig!: InterpolationConfig;  unparse(ast: AST, interpolationConfig: InterpolationConfig) {    this._expression = '';    this._interpolationConfig = interpolationConfig;    this._visit(ast);    return this._expression;  }  visitPropertyRead(ast: PropertyRead, context: any) {    this._visit(ast.receiver);    this._expression += ast.receiver instanceof ImplicitReceiver ? `${ast.name}` : `.${ast.name}`;  }  visitPropertyWrite(ast: PropertyWrite, context: any) {    this._visit(ast.receiver);    this._expression +=receiver instanceof ImplicitReceiver ? `${ast.name} = ` : `.${ast.name} = `;    this._visit(ast.value);  }  visitUnary(ast: Unary, context: any) {    this._expression += ast.operator;    this._visit(ast.expr);  }  visitBinary(ast: Binary, context: any) {    this._visit(ast.left);    this._expression += ` ${ast.operation} `;    this._visit(ast.right);  }  visitChain(ast: Chain, context: any) {    const len = ast.expressions.length;    for (let i = 0; i < len; i++) {visit(ast.expressions[i]);expression += i == len - 1 ? ';' : '; ';    }  }  visitConditional(ast: Conditional, context: any) {    this._visit(ast.condition);    this._expression += ' ? ';    this._visit(ast.trueExp);    this._expression += ' : ';    this._visit(ast.falseExp);  }  visitPipe(ast: BindingPipe, context: any) {    this._expression += '(';    this._visit(ast.exp);    this._expression += ` | ${ast.name}`;    ast.args.forEach(arg => {expression += ':';visit(arg);    });    this._expression += ')';  }  visitCall(ast: Call, context: any) {    this._visit(ast.receiver);    this._expression += '(';    let isFirst = true;    ast.args.forEach(arg => {sFirst) this._expression += ', ';t = false;visit(arg);    });    this._expression += ')';  }  visitSafeCall(ast: SafeCall, context: any) {    this._visit(ast.receiver);    this._expression += '?.(';    let isFirst = true;    ast.args.forEach(arg => {sFirst) this._expression += ', ';t = false;visit(arg);    });    this._expression += ')';  }  visitImplicitReceiver(ast: ImplicitReceiver, context: any) {}  visitThisReceiver(ast: ThisReceiver, context: any) {}  visitInterpolation(ast: Interpolation, context: any) {    for (let i = 0; i < ast.strings.length; i++) {expression += ast.strings[i];< ast.expressions.length) {._expression += `${this._interpolationConfig.start} `;._visit(ast.expressions[i]);._expression += ` ${this._interpolationConfig.end}`;    }  }  visitKeyedRead(ast: KeyedRead, context: any) {    this._visit(ast.receiver);    this._expression += '[';    this._visit(ast.key);    this._expression += ']';  }  visitKeyedWrite(ast: KeyedWrite, context: any) {    this._visit(ast.receiver);    this._expression += '[';    this._visit(ast.key);    this._expression += '] = ';    this._visit(ast.value);  }  visitLiteralArray(ast: LiteralArray, context: any) {    this._expression += '[';    let isFirst = true;    ast.expressions.forEach(expression => {sFirst) this._expression += ', ';t = false;visit(expression);    });    this._expression += ']';  }  visitLiteralMap(ast: LiteralMap, context: any) {    this._expression += '{';    let isFirst = true;    for (let i = 0; i < ast.keys.length; i++) {sFirst) this._expression += ', ';t = false;key = ast.keys[i];expression += key.quoted ? JSON.stringify(key.key) : key.key;expression += ': ';visit(ast.values[i]);    }    this._expression += '}';  }  visitLiteralPrimitive(ast: LiteralPrimitive, context: any) {    if (typeof ast.value === 'string') {expression += `"${ast.value.replace(Unparser._quoteRegExp, '\"')}"`;    } else {expression += `${ast.value}`;    }  }  visitPrefixNot(ast: PrefixNot, context: any) {    this._expression += '!';    this._visit(ast.expression);  }  visitNonNullAssert(ast: NonNullAssert, context: any) {    this._visit(ast.expression);    this._expression += '!';  }  visitSafePropertyRead(ast: SafePropertyRead, context: any) {    this._visit(ast.receiver);    this._expression += `?.${ast.name}`;  }  visitSafeKeyedRead(ast: SafeKeyedRead, context: any) {    this._visit(ast.receiver);    this._expression += '?.[';    this._visit(ast.key);    this._expression += ']';  }  private _visit(ast: AST) {    ast.visit(this);  }}const sharedUnparser = new Unparser();export function unparse(    ast: AST, interpolationConfig: InterpolationConfig = DEFAULT_INTERPOLATION_CONFIG): string {  return sharedUnparser.unparse(ast, interpolationConfig);}// [unparsed AST, original source code of AST]type UnparsedWithSpan = [string, string];export function unparseWithSpan(    ast: ASTWithSource,    interpolationConfig: InterpolationConfig = DEFAULT_INTERPOLATION_CONFIG): UnparsedWithSpan[] {  const unparsed: UnparsedWithSpan[] = [];  const source = ast.source!;  const recursiveSpanUnparser = new class extends RecursiveAstVisitor {    private recordUnparsed(ast: any, spanKey: string, unparsedList: UnparsedWithSpan[]) {span = ast[spanKey];prefix = spanKey === 'span' ? '' : `[${spanKey}] `;src = source.substring(span.start, span.end);edList.push([rse(ast, interpolationConfig),ix + src,    }    override visit(ast: AST, unparsedList: UnparsedWithSpan[]) {ecordUnparsed(ast, 'span', unparsedList);t.hasOwnProperty('nameSpan')) {.recordUnparsed(ast, 'nameSpan', unparsedList);t.hasOwnProperty('argumentSpan')) {.recordUnparsed(ast, 'argumentSpan', unparsedList);sit(this, unparsedList);    }  };  recursiveSpanUnparser.visitAll([ast.ast], unparsed);  return unparsed;}