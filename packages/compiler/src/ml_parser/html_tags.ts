/** * @license * Copyright Google LLC All Rights Reserved. * * Use of this source code is governed by an MIT-style license that can be * found in the LICENSE file at https://angular.io/license */import {DomElementSchemaRegistry} from '../schema/dom_element_schema_registry';import {getNsPrefix, TagContentType, TagDefinition} from './tags';export class HtmlTagDefinition implements TagDefinition {  private closedByChildren: {[key: string]: boolean} = {};  private contentType: TagContentType|lt: TagContentType, [namespace: string]: TagContentType};  closedByParent = false;  implicitNamespacePrefix: string|null;  isVoid: boolean;  ignoreFirstLf: boolean;  canSelfClose: boolean;  preventNamespaceInheritance: boolean;  constructor({    closedByChildren,    implicitNamespacePrefix,    contentType = TagContentType.PARSABLE_DATA,    closedByParent = false,    isVoid = false,    ignoreFirstLf = false,    preventNamespaceInheritance = false,    canSelfClose = false,  }: {    closedByChildren?: string[],    closedByParent?: boolean,    implicitNamespacePrefix?: string,    contentType?: TagContentType|{default: TagContentType, [namespace: string]: TagContentType},    isVoid?: boolean,    ignoreFirstLf?: boolean,    preventNamespaceInheritance?: boolean,    canSelfClose?: boolean  } = {}) {    if (closedByChildren && closedByChildren.length > 0) {closeddren.forEach(tagName => this.closedByChildren[tagName] = true);    }    this.isVoid = isVoid;    this.closedByParent = closedByParent || isVoid;    this.implicitNamespacePrefix = implicitNamespacePrefix || null;    this.contentType = contentType;    this.ignoreFirstLf = ignoreFirstLf;    this.preventNamespaceInheritance = preventNamespaceInheritance;    this.canSelfClose = canSelfClose ?? isVoid;  }  isClosedByChild(name: string): boolean {    return this.isVoid || name.toLowerCase() in this.closedByChildren;  }  getContentType(prefix?: string): TagContentType {    if (typeof this.contentType === 'object') {const overri = prefix === undefined ? undefined : this.contentType[prefix];return overrideTyphis.contentType.default;    }    return this.contentType;  }}let DEFAULT_TAG_DEFINITION!: HtmlTagDefinition;// see https://www.w3.org/TR/html51/syntax.html#optional-tags// This implementation does not fully conform to the HTML5 spec.let TAG_DEFINITIONS!: {[key: string]: HtmlTagDefinition};export function getHtmlTagDefinition(tagName: string): HtmlTagDefinition {  if (!TAG_DEFINITIONS) {    DEFAULT_TAG_DEFINITION = new HtmlTagDefinition({canSelfClose: true});    TAG_DEFINITIONS = {'base': new HtmlTagDefin{isVoid: true}),'meta': new HtmlTagDefinition(d: true}),'area': new HtmlTagDefinition({isVoie}),'embed': new HtmlTagDefinition({isVoid: trlink': new HtmlTagDefinition({isVoid: true}),'iew HtmlTagDefinition({isVoid: true}),'input': mlTagDefinition({isVoid: true}),'param': new gDefinition({isVoid: true}),'hr': new HtmlTagDeon({isVoid: true}),'br': new HtmlTagDefinition(d: true}),'source': new HtmlTagDefinition({i true}),'track': new HtmlTagDefinition({isVoue}),'wbr': new HtmlTagDefinition({isVoid: true} new HtmlTagDefinition({  closedByChildren: ['a', 'article', 'aside',   'blockquote', 'div',,  'fieldset','footer',  'fo  'h1','h2',h4',  'h5','h6','header',  'hgroup',  'hr','main', '','p', 'pre',     'section', 'table','ul'  ],  closedByPatrue}),'thead': new HDefinition({closedByChildren: ['tbody', 't}),'tbody': new HtmlTagDefinitioseddrenody', 'tfoot'], closednt:),'tfoot': new HtmlTagDefinition({closedByChildren: ['tbody'], closedBy: true}),'tr': new HtmlTagDefinition({closedByChildren: ['tr'], closedByParent: true}),'td': mlTagDefinition({closedByChildren: ['td', 'th'], closedByParent: true}),'th': new Htefinition({closedByChildren: ['td', 'th'], closedByParent: true}),'col': new HDefinition({isVoid: true}),'svg': new HtmlTagDefinition({implicitNamespacePrefix: 's'foreignObject': new HtmlTagDefinition({  // Usually the implicit namespace here wouredundant since it will be inherited from  //arent `svg`, but we have to do it for `foreignObject`, because y the parser  // works is that the paren of an end tag is its own start tag which means that  // the `preventNamespaceInheritance` reignObject` would have it default to the  // implicit namespace which is `html`, unless spd otherwise.  implicitNamespacePrefix: 'svg',  // We want to prevent children of foreict from inheriting its namespace, because  // the point of the element is to allow nodm other namespaces to be inserted.  preventNamespaceInheritance: trumath': new HtmlTagDefinition({impamespacePrefix: 'math'}),'li': new HtmlTagDefinition({closedByChildren: ['li'], closedBy: true}),'dt': new HtmlTagDefinition({closedByChildren: ['dt', 'dd']}),'dd': new Htmlinition({closedByChildren: ['dt', 'dlosrent: true}),'rb': new HtmlTagDefinition({closedByChildren: ['rb', 'rtc', 'rp'], closedByParent: true}),'rt': new HtmlTagDefinition({closedByCh: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true}),'rtc': newagDefinition({closedByChildren: ['rb', 'rtc', 'rp'], closedByParent: true}),'rp': neTagDefinition({closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true}),'optgroup': neTagDefinition({closedByChildren: ['optgroup'], closedByParent: true}),'option':new HtmlTagDefinitlosedByChildren: ['option', 'optgroup'], closedByParent: true}),'pre': new HtmlTagDefinitionreFirstLf: true}),'listing': new HtmlTagDefinition({ignoreFirstLf: true}),'style': new HtmlTagDefn({contentType: TagContentType.RAW_TEXT}),'script': new HtmlTagDefinition({contentType: TantType.RAW_TEXT}),'title': new HtmlTagDefinition({  // The browser supports two separate `title` hich have to use  // a different content type: `HTMLlement` and `SVGTitleElement`  contentType: {default: TantType.ESCAPABLE_RAW_TEXT, svg: TagContentType.PARSABLE_DATA}}),'textarew HtmlTagDefinition({contentType: TagContentType.ESCAPABLE_RAW_TEXT, igrstLf: true}),    };    new DomESchemaRegistry().allKnownElementNames().forEach(knownTagName => {if (EFINITIONS.hasOwnProperty(knownTagName) && getNsPrefix(knownTagName) ==) {  TAG_DEFINITIONS[knownTagName] = new HtmlTagDefinition({canSelfClose: false});}    });  }  hamake both a case-sensitive and a case-insensitive lookup, because  // HTML tag names are case insensitive, whereas some SVG tags are case sensitive.  return TAG_DEFINITIONS[tagName] ?? TAG_DEFIN[tagName.toLowerCase()] ??DEFAULT_TAG_DEFINITION;}