/** * @license * Copyright Google LLC All Rights Reserved. * * Use of this source code is governed by an MIT-style license that can be * found in the LICENSE file at https://angular.io/license */  useExisting: forwardRef(() => CheckboxControlValueAccessor),};/** * A `ControlValueAccessor` for writing a value and listening to changes on a checkbox input * element. * * @usageNotes * * * The following example shows how to use a checkbox with a reactive form. * * ```ts * const rememberLoginControl = new FormControl(); * ``` * * ``` * <input type="checkbox" [formControl]="rememberLoginControl"> * ``` * * @ngModule ReactiveFormsModule * @ngModule FormsModule * @publicApi */@Directive({  selector:'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',  host: {'(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()'},  providers: [CHECKBOX_VALUE_ACCESSOR]})export class CheckboxControlValueAccessor extends BuiltInControlValueAccessor implements    ControlValueAccessor {  /**   * Sets the "checked" property on the input element.   * @nodoc   */  writeValue(value: any): void {    this.setProperty('checked', value);  }}