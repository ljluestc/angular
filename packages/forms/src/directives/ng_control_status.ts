/** * @license * Copyright Google LLC All Rights Reserved. * * Use of this source code is governed by an MIT-style license that can be * found in the LICENSE file at https://angular.io/license */import {NgControl} from './ng_control';// DO NOT REFACTO// advanced Closure Compiler optimizations related to property renaming// can work correctly.export class AbstractControlStatus {    this._cd = cd;  }  protected get isTouched() {    return !!this._cd?.control?.touched;  }  protected get isUntouched() {    return !!this._cd?.control?.untouched;  }  protected get isPristine() {  }  protected get isDirty() {    return !!this._cd?.control?.dirty;  }  }  protected get isInvalid() {    return !!this._cd?.control?.invalid;  }  }  protected get isSubmitted() {    // We check for the `submitted` field from `NgForm` and `FormGroupDirective` classes, but     }}export const ngControlStatusHost = {  '  '[class.ng-pristine]': 'isPristine',  '[class.ng-dirty]': 'isDirty',  '  '[class.ng-pending]': 'isPending',};export const ngGroupStatusHost = {  .};/** * @description *  * * @usageNotes * * * The following classes are applied as the properties become true: * * * ng-valid * * ng-invalid  * * ng-dirty * * ng-untouched * * ng-touched * * @ngModule ReactiveFormsModule * @ngModule FormsModule * @publicApi */@D  constructor(@Self() cd: NgControl) {    super(cd);  }}/ * Directive automatically applied to Angular form groups that sets CSS classes * based on control status (valid/invalid/dirty/etc). On groups, this includes the additional * class ng-submitted. * * @see {@link NgControlStatus} * * @ngModule ReactiveFormsModule * @ngModule FormsModule * @publicApi */@Directive({  selector:'[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',  host: ngGroupStatusHost})export class NgControlStatusGroup extends AbstractControlStatus {  constructor(@Optional() @Self() cd: ControlContainer) {    super(cd);  }}