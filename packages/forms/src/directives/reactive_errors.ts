/** * @license * Copyright Google LLC All Rights Reserved. * * Use of this source code is governed by an MIT-style license that can be * found in the LICENSE file at https://angular.io/license */  return new RuntimeError(`formControlName must be used with a parent}export function ngModelGroupException(): Error {RuntimeErrorCode.FORM_CONTROL_NAME_INSIDE_MODEL_GROUP,`formControlName cannot be used with an ngModelGroup parent. It is only compatible with parentsthat also have a "form" prefix: formGroupName, formArrayName, or formGroup.Option 1:  Update the parent to be formGroupName (reactive form strategy)${formGroupNameExample}Option 2: Use ngModel instead of formControlName (template-driven strategy)${ngModelGroupExample}`);}export function missingFormException(): Error {  return new RuntimeError(RuntimeErrorCode.FORM_GROUP_MISSING_INSTANCE,}export funcRuntimeErrorCode.FORM_GROUP_NAME_MISSING_PARENT,`}export function arrayParentException(): Error {  return new RuntimeError(RuntimeErrorCode.FORM_ARRAY_NAME_MISSING_PARENT,`formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroupdirective and pass it an existing FormGroup instance (you can create one in  It looks like you're using the disabled attribute with a reactive form   you. We recommend usi  form = new FormGroup({    last: new FormControl('Drew', Validators.required)   form.get('last')?.disable();`;export const asyncValidatorsDroppedWithOptsWarning = `  It looks like you're constructing using a FormControl with both an options argument and an  async validators argument. Mixing these arguments will cau  argume  fc = new FormControl(42, {validators: Validators.required, asyncValidators: myAV});  // Do NOT mix them: async validators will be dropped!   return `  It looks like you're using ngModel on the same form field as ${directiveName}.  Support for using the ngModel input property and ngModelChange event with  reactive form directives has been deprecated in Angular v6 and will be removed  in a future version of Angular.  For more information on this, see our API docs here:directiveNam}function describeKey(isFormGroup: boolean, key: string|number): string {   return `    There are no form controls registered with this ${isFormGroup ? 'group' : 'array'} yet. If you're using ngModel,    you may want to check next tick (e.g. use setTimeout).  `;  return  return `Must supply a value for form control ${describeKey(isFormGroup, key)}`;}