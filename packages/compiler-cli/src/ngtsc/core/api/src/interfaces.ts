/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */ */   * into a filepath.
   *
   * The optional `fallbackResolve` method can be used as a way to attempt a fallback resolution if
   resourceNameToFileName(
      resourceName: string, containingFilePath: string,
      fallbackResolve?: (url: string, fromFile: string) => string | null): string|null;  /**
   * Load a referenced resource either statically or asynchronously. If the host returns a
    * cause a diagnostics error or an exception to be thrown.
   */
  readResource(fileName: string): Promise<string>|string;  /**   * or `undefined` if this is not an incremental build.
   */
    * It is assumed the consumer of the corresponding `Program` will call
   * `loadNgStructureAsync()`. Using outside `loadNgStructureAsync()` will
   * cause a diagnostics error or an exception to be thro   *   * @param context Information regarding the resource such as the type and containing file.
   * @returns A promise of either the transformed resource data or null if no transformation occurs.
  * Contextual information used by members of the ResourceHost interface.
 */
export interface ResourceHostContext {   * The type of the component resource. Template   * type `style`.
   */
  readonly type: 'style';   * The absolute path to the resource file. If the resource is inline, the value will be null.
   /**
   * The absolute path to the file that contains the resource or reference to the resource.
   */
  readonly containingFile: string; * The successful transformation result of the `Resou * support.
 */
export interface TransformResourceResult {   * The content generated by the transformation.
 }/**
 * A `ts.CompilerHost` interface which supports some number of optional methods in addition to the
 * core interface.
 */