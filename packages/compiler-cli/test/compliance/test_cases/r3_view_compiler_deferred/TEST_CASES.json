{
  "$schema": "../test_case_schema.json",
  "cases": [
    {
      "description": "should generate a basic deferred block",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["defer"]
      },
      "inputFiles": [
        "basic_deferred.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "basic_deferred_template.js",
     "generated": "basic_deferred.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should generate a deferred block with secondary blocks",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["defer"]
      },
      "inputFiles": [
        "deferred_secondary_blocks.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "deferred_secondary_blocks_template.js",
     "generated": "deferred_secondary_blocks.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should generate a deferred block with placeholder block parameters",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["defer"]
      },
      "inputFiles": [
        "deferred_with_placeholder_params.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "deferred_with_placeholder_params_template.js",
     "generated": "deferred_with_placeholder_params.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should generate a deferred block with loading block parameters",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["defer"]
      },
      "inputFiles": [
        "deferred_with_loading_params.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "deferred_with_loading_params_template.js",
     "generated": "deferred_with_loading_params.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should generate a deferred block with local dependencies",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["defer"]
      },
      "inputFiles": [
        "deferred_with_local_deps.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "deferred_with_local_deps_template.js",
     "generated": "deferred_with_local_deps.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should generate a deferred block with external dependencies",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["defer"]
      },
      "inputFiles": [
        "deferred_with_external_deps.ts",
        "deferred_with_external_deps_eager.ts",
        "deferred_with_external_deps_lazy.ts",
        "deferred_with_external_deps_loading.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "deferred_with_external_deps_template.js",
     "generated": "deferred_with_external_deps.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should generate a deferred block with triggers",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["defer"]
      },
      "inputFiles": [
        "deferred_with_triggers.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "deferred_with_triggers_template.js",
     "generated": "deferred_with_triggers.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should generate a deferred block with prefetch triggers",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["defer"]
      },
      "inputFiles": [
        "deferred_with_prefetch_triggers.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "deferred_with_prefetch_triggers_template.js",
     "generated": "deferred_with_prefetch_triggers.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should generate a deferred block with a `when` trigger that has a pipe",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["defer"]
      },
      "inputFiles": [
        "deferred_when_with_pipe.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "deferred_when_with_pipe_template.js",
     "generated": "deferred_when_with_pipe.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    }
  ]
}
