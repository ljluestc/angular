{
  "$schema": "../test_case_schema.json",
  "cases": [
    {
      "description": "should generate a basic switch block",
      "angularCompilerOptions": {
        "_enabledBlockTypes": [
 "switch"
        ]
      },
      "inputFiles": [
        "basic_switch.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "basic_switch_template.js",
     "generated": "basic_switch.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ]
    },
    {
      "description": "should generate a switch block without a default block",
      "angularCompilerOptions": {
        "_enabledBlockTypes": [
 "switch"
        ]
      },
      "inputFiles": [
        "switch_without_default.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "switch_without_default_template.js",
     "generated": "switch_without_default.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should generate nested switch blocks",
      "angularCompilerOptions": {
        "_enabledBlockTypes": [
 "switch"
        ]
      },
      "inputFiles": [
        "nested_switch.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "nested_switch_template.js",
     "generated": "nested_switch.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should generate switch block with a pipe in its expression",
      "angularCompilerOptions": {
        "_enabledBlockTypes": [
 "switch"
        ]
      },
      "inputFiles": [
        "switch_with_pipe.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "switch_with_pipe_template.js",
     "generated": "switch_with_pipe.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should generate a basic if block",
      "angularCompilerOptions": {
        "_enabledBlockTypes": [
 "if"
        ]
      },
      "inputFiles": [
        "basic_if.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "basic_if_template.js",
     "generated": "basic_if.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should generate a basic if/else block",
      "angularCompilerOptions": {
        "_enabledBlockTypes": [
 "if"
        ]
      },
      "inputFiles": [
        "basic_if_else.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "basic_if_else_template.js",
     "generated": "basic_if_else.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should generate a basic if/else if block",
      "angularCompilerOptions": {
        "_enabledBlockTypes": [
 "if"
        ]
      },
      "inputFiles": [
        "basic_if_else_if.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "basic_if_else_if_template.js",
     "generated": "basic_if_else_if.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should generate a nested if block",
      "angularCompilerOptions": {
        "_enabledBlockTypes": [
 "if"
        ]
      },
      "inputFiles": [
        "nested_if.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "nested_if_template.js",
     "generated": "nested_if.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should generate an if block using pipes in its conditions",
      "angularCompilerOptions": {
        "_enabledBlockTypes": [
 "if"
        ]
      },
      "inputFiles": [
        "if_with_pipe.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "if_with_pipe_template.js",
     "generated": "if_with_pipe.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should generate an if block with an aliased expression",
      "angularCompilerOptions": {
        "_enabledBlockTypes": [
 "if"
        ]
      },
      "inputFiles": [
        "if_with_alias.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "if_with_alias_template.js",
     "generated": "if_with_alias.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should expose the alias to nested conditional blocks",
      "angularCompilerOptions": {
        "_enabledBlockTypes": [
 "if"
        ]
      },
      "inputFiles": [
        "if_nested_alias.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "if_nested_alias_template.js",
     "generated": "if_nested_alias.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should expose the alias to nested event listeners",
      "angularCompilerOptions": {
        "_enabledBlockTypes": [
 "if"
        ]
      },
      "inputFiles": [
        "if_nested_alias_listeners.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "if_nested_alias_listeners_template.js",
     "generated": "if_nested_alias_listeners.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should generate a basic for block",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["for"]
      },
      "inputFiles": [
        "basic_for.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "basic_for_template.js",
     "generated": "basic_for.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should generate a for block with an empty block",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["for"]
      },
      "inputFiles": [
        "for_with_empty.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "for_with_empty_template.js",
     "generated": "for_with_empty.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should generate a for block that tracks by index",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["for"]
      },
      "inputFiles": [
        "for_track_by_index.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "for_track_by_index_template.js",
     "generated": "for_track_by_index.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should generate a for block that tracks by a field on the item",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["for"]
      },
      "inputFiles": [
        "for_track_by_field.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "for_track_by_field_template.js",
     "generated": "for_track_by_field.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should generate a nested for block",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["for"]
      },
      "inputFiles": [
        "nested_for.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "nested_for_template.js",
     "generated": "nested_for.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should generate a for block with template variables",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["for"]
      },
      "inputFiles": [
        "for_template_variables.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "for_template_variables_template.js",
     "generated": "for_template_variables.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should generate a for block with aliased template variables",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["for"]
      },
      "inputFiles": [
        "for_aliased_template_variables.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "for_aliased_template_variables_template.js",
     "generated": "for_aliased_template_variables.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should be able to refer to aliased template variables in nested for blocks",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["for"]
      },
      "inputFiles": [
        "nested_for_template_variables.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "nested_for_template_variables_template.js",
     "generated": "nested_for_template_variables.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should be able to use for loop variables in an event listener",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["for"]
      },
      "inputFiles": [
        "for_template_variables_listener.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "for_template_variables_listener_template.js",
     "generated": "for_template_variables_listener.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should parenthesize context variables used in an expression",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["for"]
      },
      "inputFiles": [
        "for_variables_expression.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "for_variables_expression_template.js",
     "generated": "for_variables_expression.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should implicitly allocate data slots for primary and empty block",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["for"]
      },
      "inputFiles": [
        "for_data_slots.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "for_data_slots_template.js",
     "generated": "for_data_slots.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should not expose for loop variables to the surrounding scope",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["for"]
      },
      "inputFiles": [
        "for_template_variables_scope.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "for_template_variables_scope_template.js",
     "generated": "for_template_variables_scope.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should optimize tracking function that calls a method on the component with $index and the item from the root template",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["for"]
      },
      "inputFiles": [
        "for_template_track_method_root.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "for_template_track_method_root_template.js",
     "generated": "for_template_track_method_root.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should optimize tracking function that calls a method on the component with $index and the item from a nested template",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["for"]
      },
      "inputFiles": [
        "for_template_track_method_nested.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "for_template_track_method_nested_template.js",
     "generated": "for_template_track_method_nested.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should reuse identical pure tracking functions",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["for"]
      },
      "inputFiles": [
        "for_pure_track_reuse.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "for_pure_track_reuse_template.js",
     "generated": "for_pure_track_reuse.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should reuse identical impure tracking functions",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["for"]
      },
      "inputFiles": [
        "for_impure_track_reuse.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "for_impure_track_reuse_template.js",
     "generated": "for_impure_track_reuse.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should preserve object and array literals inside tracking expressions",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["for"]
      },
      "inputFiles": [
        "for_track_literals.ts"
      ],
      "expectations": [
        {
 "files": [
   {
     "expected": "for_track_literals_template.js",
     "generated": "for_track_literals.js"
   }
 ],
 "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    }
  ]
}
