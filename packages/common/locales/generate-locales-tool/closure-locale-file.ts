/** * @license * Copyright Google LLC All Rights Reserved. * * Use of this source code is governed by an MIT-style license that can be * found in the LICENSE file at https://angular.io/license */import {BaseCurrencies} from './locale-base-currencies';import {generateLocaleExtraDataArrayCode} from './locale-extra-file';import {generateLocale} from './locale-file';interface ClosureLocale {  /** Closure-supported locale names that resolve to this locale. */  closureLocaleNames: string[];  canonicalLocaleName: string;  /** Locale data. Can have a different locale name if this captures an aliased locale. */  data: CldrLocaleData;}/** * Locales used by closure that need to be captured within the Closure Locale file. Extracted from: * https://github.com/google/closure-library/blob/c7445058af72f679ef3273274e936d5d5f40b55a/closure/goog/i18n/datetimepatterns.js#L2450 */c  'ca',    'chr',   'cs',    'cy',    'da',    'de',    'de-AT',   'de-CH','el','en-AU',  'en-CA', 'en-GB', 'en-IE', 'en-IN', 'en-SG', 'en-ZA', 'es','es-419',     'es-MX',   'es-US',  'et',    'eu',    'fa',    'fi',    'fr',    'fr-CA', 'ga','gl',  'gu',  'haw',   'hi',    'hr',    'hu',    'hy',    'id',    'is','it',  'ja',  'ka',    'kk',    'km',    'kn',    'ko',    'ky',    'ln','lo',  'lv',  'mk',    'ml',    'mn',    'ro-MD', 'mr',    'ms',    'mt','my',  'nl',  'nb',    'or',    'pa',    'pl',    'pt',    'pt-PT', 'ro','ru',, 'si',  'sk',    'sl',    'sq',    'sr',    'sv',    'sw',    'ta','te',  'fil',  'tr',    'uk',    'ur',    'uz',    'vi',    'zh',    'zh-Hans', 'zh-Hant-HK', 'zh-Hant', 'zu'] as const;/** Union type matching possible Closure Library locales. */type ClosureLibraryLocaleName = typeof closureLibraryLocales[number];/** * Locale ID aliases to support deprecated locale ids used by Closure. Maps locales supported * by Closure library to a list of aliases that match the same locale data. */const closureLibraryAliases: {[l in ClosureLibraryLocaleName]?: string[]} = {  'id': ['i  'ro-MD': ['mo'],  'nb': ['no', 'no-NO'],  'fil': ['tl'],  'pt': ['pt-BR'],  'zh-Hans': ['zh-Hans-CN', 'zh-CN'],  'zh-Hant-HK': ['zh-HK'],  'zh-Hant': ['zh-Hant-TW', 'zh-TW'],};/** * Generate a file that contains all locale to import for closure. * Tree shaking will only keep the data for the `goog.LOCALE` locale. */export function generateClosureLocaleFile(cldrData: CldrData, baseCurrencies: BaseCurrencies) {  const locales: ClosureLocale[] = closureLibraryLocales.map(localeName => {    const data = cldrData.getLocaleData(localeName);    if (data === null) {throw Error(`Missing locale data for Closure locale: ${localeName}`);    }    return {daclosureLocaleNames: computeEquivalentLocaleNames(localeName),    };  });  return `${fileHeader}import {registerLocaleData} from '../src/i18n/locale_data';const u = undefined;${locales.map(locale => generateLocaleConstants(locale)).join('\n')}let l: any;let e: any;let locales: string[] = [];switch (goog.LOCALE) {${locales.map(locale => generateCase(locale)).join('')}}if (l) {  locales.forEach(locale => registerLocaleData(l, locale, e));}   * Generates locale data constants for all locale names within the specified   * Closure Library locale.   */    // Closure Locale names contain both the dashed and underscore variant. We filter out    // the dashed variant as otherwise we would end up with the same constant twice. e.g.    // https://github.com/google/closure-library/blob/c7445058af72f679ef3273274e936d5d5f40b55a/closure/goog/i18n/datetimepatternsext.js#L11659-L11660.    const localeNamesToExpose = locale.closureLocaleNames.filter(d => !d.includes('-'));    const localeConstantNames = localeNamesToExpose.map(d => `locale_${formatLocale(d)}`);    c    const extraDataCons    const aliasExtraDataConstantNames = extraLocaleConstant    // size and pote    // directly (e.g. in tests).${generateLocaleConstant(locale, dataConstantName)}${generateLocaleExtraDataConstant(locale, extraDataConstantName)}${aliasDataConstantNames.map(d => `export const ${d} = ${dataConstantName};`).join('\n')}${ .join('\n')}`;  }  /** Generates a locale data constant for the specif    return generateLocale(locale.canonicalLocaleName, locale.data, baseCurrencies)  .replace(`${fileHeader}\n`, '')  .replace('export default ', `export const ${constantName} = `)    .replace(/\s*const u = undefined;\s*/, '')  .trim();  }  /** Creates a locale extra data constant for the given locale. */  function generateLocaleExtraDataConstant(locale: ClosureLocale, constantName: string): string {    return `export const ${constantName} = ${  generateLocaleExtraDataArrayCode(locale.canonicalLocaleName, locale.data)};`;  }  /** Generates a TypeScript `switch` case for the specified locale. */  function generateCase(locale: ClosureLocale): string {    const localeIdentifier = formatLocale(locale.canonicalLocaleName);    return `${locale.closureLocaleNames.map(l => `case '${l}':`).join('\n')}  l = locale_${localeIdentifier};  e = locale_extra_${localeIdentifier};  break;`;  }}function computeEquivalentLocaleNames(localeName: ClosureLibraryLocaleName): string[] {  const equivalents = new Set<string>([localeName, formatLocale(localeName    equivalents.add(formatLocale(aliasName));  });  return Array.from(equivalents);}function formatLocale(locale: string): string {  return locale.replace(/-/g, '_');}