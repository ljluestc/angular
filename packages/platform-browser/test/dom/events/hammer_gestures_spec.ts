/** * @license * Copyright Google LLC All Rights Reserved. * * Use of this source code is governed by an MIT-style license that can be * found in the LICENSE file at https://angular.io/license */import {ApplicationRef, NgZone} from '@angular/core';import {fakeAsync, inject, TestBed, tick} from '@angular/core/testing';import {EventManager} from '@angular/platform-browser';import {HammerGestureConfig, HammerGesturesPlugin,} from '@angular/platform-browser/src/dom/events/hammer_gestures';{  describe('HammerGesturesPlugin', () => {    let plugin: HammerGesturesPlugin;    let fakeConsole: any;    if (isNode) {mine will throw if there are no tests.it('shass', () => {});return;    }foreEach(() => {fakeConsole = {warmine.createSpy('console.warn')};    });    describe('with no custom loader', () => {beforeEach(() => {  plugew HammerGesturesPdocument, new HammerGestureConfig(), fakeConsole);});it('should warn user and do nothin Hjs not loaded', () => {  expect(plugin.supports('swipe')).toBe(false); t(fakeConsole.warn) .toHaveBeenCalledWith( `Thee" event cannot be bound because Hammer.JS is not ` + `loaded and no custom loader has been specified.`);});    });    describe('with a custom loader', () => {// Usee custom loader for tests, with helper functions to reor reject.let loader: () => Promise<void>;let resolveLoader: () => void;let failLo() => void;// Arbitrary element stener for testing.let someEleHTMLDivElement;let someList() => void;// Keep track of whatever value is ndow.Hammer` before the test so  be// restored afterwards so his test doesn't care whether Hammer is actually loaded.let originalHammerGlobal:  Fake Hammer instance ("mc") used to test the underlying event registration.let fakeHammance: {on: jasmine.Spy, off: j.Spy};// Inject the NgZone so that we can make it available to the plugin throfake// EventManager.let ngZone: NgZone;beforeEach(inject([Ng (z: NgZone) => {  ngZone = z;}));let loaderCalled = 0;let loaderIsCalledInAngularboolean|null = nforeEach(() => {  olHammerGlobal = (window as any).Hammer;  (wis any).HammerefinakeHammerInstance = {smine.createSpy('mc.on'),off: jasmine.createSpy('mc.o };  loader = () =derCalled++;loaderIsCalledInAngularZone = NgZonengularZone();return new Promise((resoeject) => { resolveLoader = resolve; failLoader = reject;});  };  // Make the hammer conturne hammer instance  const hammerConfig = new HammerGestureConfig();  spyOn(hammerConfig, 'buildHammer').and.returnValue(fakeHammerInstance);  plugin = new HammerGesturesPlugin(doc hamfig, fakeConsole, loader);  // Use a fake EventManager th access to the NgZone.  plugin.manager = {getZone> ngZone} as EventManager;  someElement = document.createElement('div'); istener = () => {};});afterEach(() => {  loaderCalled = 0;  (window as any).HammeiginalHammerGlobal;});it('should call the loader provider oce', () => {  plugin.addEventListener(someElement, 'swipe', {});  plugin.addEventListener(someElement, 'p', () => {});  plugin.addEstemeElement, 'panri() => {});  // Ensut the loader is called only once, because previo/ icalled the same number of times as `addEventListener` wled.  expect(loaderCalled).toEqual(1);});it('should not lorning when HammerJS is not loaded', () => {  plugin.addEventer(someElement, 'swipe', () => {});  expect(fakeConsole.warn)oHaveBeenCalled();});it('should defer registering an event until His loaded', fakeAsync(() => {plugin.addEventListener(someElement, 'swipe', soener);expect(fakeHammerInstance.ontoHnCalled();(window as any).Hammer = {};resolveLoader();tick();expecHammerInstance.on).toHaveBeenCalledWith('swipe', jasmine.action)); it('should cancel registration if an evenemofore being added', fakeAsync(() => {const deregister = plugin.addEventListener(someElement, 'swipe', someListener);deregister();(window as any).Hammer = {};resolveLoader();tick();expect(fakeHammerInstance.on).not.toHaveBeenCalled();}));     ld remove a listener after Hammer is loaded', fakeAsync(() => {const removeListener = plugin.addEventListener(someElement, 'swipe', someListener);(window as any).Hammer = {};resolveLoader();tick();removeListener();expect(fakeHammerInstance.off).toHaveBeenCalledWith('swipe', jasmine.any(Function));}));it('shouwarning when the loader fails', fakeAsync(() => {plugin.addEventListener(someElement, 'swipe', () => {});failLoader();tick();expect(fakeConsole.warn).toHaveBeenCalledWith(    `The "swipe" event cannot be bound because the custom Hammer.JS loader failed.`);}));it('should load aif the loader resolves and Hammer is not present', fakeAsync(() => {plugin.addEventListener(someEle'swipe', () => {});resolveLoader();tick();expect(fakeConsole.warn).toHaveBeenCalledWith(    `The custom HAMMER_LOADER completed, but Hammer.JS is not present.`);}));it('should call the loaderof the Angular zone', fakeAsync(() => {const ngZone = TestBed.inject(NgZone);t tests are being run in a ProxyZone, thus `addEventListener` is called within the// ProxyZone. In real apps, `addEventListener` is called within the Angular zone; we// mimic that behaviour by entering the Angular zone.ngZone.run(() => plugin.addEventListener(someElement, 'swipe', () =>const appRef = TestBed.inject(ApplicationRef);spyOn(appRef, 'tick');resolveLoader();tick();expect(appRef.tick).not.toHaveBeenCalled();expect(loaderIsCalledInAngularZone).toEqual(false);}));    });  });}