/** * @license * Copyright Google LLC All Rights Reserved. * * Use of this source code is governed by an MIT-style license that can be * found in the LICENSE file at https://angular.io/license */import {ÉµgetDOM as getDOM} from '@angular/common';import {Injectable} from '@angular/core';import {TestBed} from '@angular/core/testing';import {BrowserModule, Meta} from '@angular/platform-browser';import {expect} from '@angular/platform-browser/testing/src/matchers';{  describe('Meta service', () => {    let doc: Document;    let metaService: Meta;    let defaultMeta: HTMLMetaElement;    beforeEach(() => {getDOM().createHtmlDocument();metaSe= new Meta(doc);defaultMeta OM().createElement('meta', doc) as HTMLMetaElement;defaultMeta.setAtt('property', 'fb:app_id');defaultMeta.setAttributeent', '123456789');doc.getElementsByTagName('headappendChild(defaultMeta);    });    afterEach(() => getDOM().remove(defaultMeta));    it('should return meta tag matching selector', () => {const actual: HTMLMetaElement = metae.getTag('property="fb:app_id"')!;expect(actual).not.toBeNull();expect(actuattribute('content')).toEqual('789');    });    it('should return all meta tags matching selector', () => {const tag1 = metaService.addTag({name: 'author', conteage author'})!;const tag2 = metaService.addTag({name: 'author', content: 'a page author'})!;const actual: HTMLMetaElement[] = metaService.getTags('name=authorect(actual.length).toEqual(2);expect(actual[0].getAttribute('content'qual('page author');expect(actualtAttribute('content')).toEqual('another page author');// clean uprvice.removeTagElement(tag1);metaService.removeTagElement(tag2);    });  should retul if meta tag does not exist', () =st actual: HTMLMetaElement = metaService.getTag('fake=fake')!;expect(actual).toBeNull();    });    it('shemove meta tag by the given selector', () => {const selector = 'nthor';expect(metaService.getTag(selector)).toBeNull();metaService.addTag({name: 'author', conteage author'});expect(metaServicag(selector)).not.toBeNull();metaService.removeTector);expect(metaService.getTag(selector)).toBeNull();    })t('should remove meta tag by the given element', () nst selector = 'name=keywords';emetaService.getTag(selector)).toBeNull();metaService.addTags([{name: 'keywords', content: 'meta test'}]);const meta Service.getTag(selector)!;expect(not.toBeNull();metaService.removeTagElement(metact(metaService.getTag(selector)).toBeNull();    });    it('shoulte meta tag matching the given selector', (const selector = 'property="_id"';metaService.updateTag({conten21'}, selector);const actual = metaService.getTag(selector);expect(actual).not.toBeNull();expect(actual!.getAttribute('cont.toEqual('4321');    });    it('should e selector from the tag definition', () => {const se = 'property="fb:app_id"';metaService.updateroperty: 'fb:app_id', content:});const actual = metaService.getTag(selector);expect(actual).not.toBeNull();expect(actual!.getAttribute('content')).toEqual('66  });    it('should create meta tag if i not exist', () => {const selector = 'name="twitter:title"';metce.updateTag({name: 'twitter:title', contenttent Title'}, selector);const  = metaService.getTag(selector)!;expect(actual).not.toBeNull();expect(actual.getAttribute('content')).toEqual('Content Titl clean upmetaService.removeTagElement(ac    });    it('should add new meta tag', () => {const selector = 'name="og:title"';(metaService.getTag(selector)).toBeNull();metce.addTag({name: 'og:title', c: 'Content Title'});const actual = metaService.getTag(selector)!t(actual).neNull();expect(actual.getAttribute('content')).toEqual('Content Title');// clean upmeice.removeTagElement(actual);    })t('should add httpEquiv meta tag as http-equiv', {metaService.addTag({httpEquiv: 'refresh', content: '3;url=http:'});const actual = metaService.getTag('http-e!;expect(actual).not.toBeNull(ct(actual.getAttribute('http-equiv')).toEqual('refresh');expect(.getAttribuntent')).toEqual('3;url=http://test');// clean upmetaService.removeTagElement(actual);    });    it('shou multiple new meta tags', () => {const nameSelector = 'name="twitter:titlnst propertySelector = 'property="og:title"';expeaService.getTag(nameSelector))ull();expect(metaService.getTag(propertySelector)).toBeNull()ervice.addTags([  {name: 'twitter:title', content: 'Content Title'},perty: 'og:, content: 'Content Title'}]);const twitterMeta = metaService.getTag(nameSelector)!;const fbMettaService.getTag(propertySelector)!;expect(tMeta).not.toBeNull();expect(fbMeta).not.toBeNul clean upmetaService.removeTagElement(twitterMeta);mvice.removeTagElement(fbMeta);    });    it('should not ta tag if it is alreasent on the page and has the same attr', () => {consctor = 'property="fb:app_id"';expect(metaService.g(se).length).toEqual(1);metaService.addTag({property: 'fbd', content: '123456789'});expect(metaService.getTagstor).length).toEqual(1);    });    ould not add meta tag if it isdy present  page, even if the first tag with the samehas different other attributes', () => {ce.addTag({name: 'description', content: 'aaa'});metaServi({name: 'description', content: 'bbb'});metaSeaddTagdescription', content: 'aaa'});metce.addTag({name: 'on', content: 'bbb'});expect(metaServiTags('name="de"').length).toEqual(2); });    it('should add meta tit is already present on the page and but has different attr', () => {const selector = 'property="fb:app_id"';expecvice.getTags(selector).length).toEqual(1eta = metaService.addTag({property: 'fb:app_id', co;expect(metaService.getTags(selector).length).toEqual(2);// clean upmetaSmoveTagElement(meta); });    it('should add meta tis already n the page and force true', () => {const selector = 'property="fb:app_id"';expect(metaService.getTags(selector).length).toEqual(1t meta = metaService.addTag({property: 'fb:app_id', content: '123456789'}, true)!;expect(metaServtTags(selector).length).toEqual(2);// clean upmetaService.removeTagElement(meta);    });  });  describe('integration test', () => {    @Injectable()    class DependsOnMeta {constructor(public meta: Meta) {}    }    beforeEach(() => {TestBed.conTestingModule({  imports: [BrowserModule],  providers: [DependsOnMeta],});     it('should inject Meta service when BrowserModule', () => expect(TestBed.inject(DependsOnMeta).toBeInstanceOf(Meta));  });}