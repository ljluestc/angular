/** let listen expect(listeners.length).toBe(2); button.dispatchEvent(clickEvent); expect(logs.length).toBe(2); ex logs = []; listeners = button.eventListeners!('click'); button.dispatchEvent(clickEvent); expect(listeners.length) expect(logs).toEqual(['cl function() { let logs: string[] = [];name: 'spy',   onScheduleTask: (  eventTask = task; return parentZoneD   } }); zone.run(() => {   button.addEventListener('click', fu logs.push('cli   }, }); but }, true); let listeners  button.dispatchEvent(clickE expe expect(logs).toEqual(['click1', 'click2']); eventTask!.zone.canc logs = []; list button.dispatchEvent(clickEvent); expect(logs.length).toBe(1); expect(liste   it('should support   let eventTask: Task;   name: 'spy',   onScheduleTask: (   parentZoneDelegate: ZoneDelegate, currentZone: Zone, targetZone: Zone, task: Task):   any => { eventTask = task; return parentZoneDelegate.scheduleTask(targetZone, ta   }  zone.run(() => { logs.push('click   }, true);logs.push('click2'); let listeners = button.e expect(listeners.l button.dispatchEvent(clickE ex expect(logs).toEqual(['click1', 'click2']);  listeners = button.eventListene button.dispatchEvent(clickEvent); expect(listeners.length).toBe(1 expect(logs).toEqual(['click2']); });  it('should support reschedule eventTask', ifEnvSupp let hookSpy1 = jasmine.createSpy('spy1'); let hookSpy2 = jasmine.createSpy('spy2' let hookSpy3 = jasm let logs: string[] const isUnpatchedEvent = function(source: string) {   return source.lastIndexOf('click') !== -1; }; const zone1 = Zone.current.fork({   name:   onScheduleTask: (an  task.cancelScheduleRequest() return zone2.scheduleTask(task); } else { return p   },   onInvokeTask(   parentZoneDelegate: ZoneDelegate, currentZone: Zone, return p   } }); const zone2 = Zone.current.fork({   name: 'zone2',   onScheduleTask: (   parentZ   any => { hookSpy2();   },   onInvokeTask( return parentZoneD   } }); co   logs.push(Zone.current.name); }; zone1.run(() => {   button.addEven   button.addEventListe }); const cl clickEvent const mouse mouseEvent.initEve button.dispatchEvent button.removeEventLis expect(logs). expect(ho expect(ho expect(hookSpy3 logs = []; hookSpy2 = j hookSpy3 button.dispat button.remov expect(logs). expect(hookS expect(h expect(hookSpy3).n }))  it('coconsname: 'spy',onScheduleTask:(parenany hookSpy();return parent}}zone.rubutton.setAttributeexpect(button.onclick).});  });  describeit('slet logs: striconst listen  button.remove  logs.push('listener1};const lis  logs.push(};const listener3   handleEvent: fulogs.push('li  }};button.addEventListenbutton.addEventListener(button.addEventListener('clbutton.dispatexpect(logs.lengexpect(logs).tlogs = [];button.disexpect(logsexpect(logsbutton.removbutton.remo});i function   let logs:   const li button. logs.push(   };   const listene logs.push   };   const list handleEvent: fun   logs.push(' }   };   button.addEventListener('   button.addEventListener('click', listener2, true);   button.addEventListener('click', listener3, true);   button.dispatchEvent(clickEvent); expect(logs).toEqual(['   logs = [];   button.dispa   expect(logs.le   expect(logs).toEqual(   button.removeE   button.remove });it('should be able to  function() {   let logs: st   const listener1  logs.pu   };   const lis logs.p   };   const list handleEv   logs.p   button.removeE }   };   button.addEvent   button.addEventListe   button.addEventListener expect(logs.length).toBe(3);   expect(logs).toEqual(['listener1', 'listener2', 'listener3']);   logs = [];   button.dispatchEvent expect(logs).toEqual(['list   button.removeEventListener   button.rem });it('should  function() {   let logs: string[   const listener logs.push(   };   const listener2 logs.push('lis   };   const listene handleEvent:   logs.push('l   button.re }   };   button.addEventL   button.addE   button.addEve   button.di   expect(logs.   expect(logs).t   logs = [];   button.dispa   expect   expect(logs).to   button.removeEven   button.removeEventLi });it('should  function() {   let logs: string[] =const listener1  logs.push('listener1 button.removeEv button.remove   };   const listener2  logs.push('lis   };   const listener handleEvent:logs.push }   };   button   button.addEven button.dispatchEvent(clickEvent);   expect(logs.length).toBe(1);   expect(logs).toEqual(['listener1'   button.removeEventListe }); function() {   let logs: string[] = [];   const listener1 =   button.removeEventListe button.removeEventListener('click', listener3, true);   };   logs.push('listener2');   }; handleEvent: function(event: Event) {   logs.push('listener3'); }   button.addEventListener('click',button.addEventListener('click', listener2, true);   button.addEventListen   button.dispatchEvent(cl   expect(logs.length).toB   expect(logs).toEqual(['list   bu })it('should be able to remove  function() {   let logs: string[] = [];   const listen  button.removeEventListener('click', listener2);   };   const listener2 = function() logs.push('listener2');   };   const listener3 = { handleEvent: function   }   };   button.addEventListener('clic   button.addEventListener('click', listener2);   button.addEven   button.dispatchEvent(cl   expect(logs.length).toBe(2);   expect(logs).toEqual(['listener1', 'listener3']);   button.removeEventListener('click', l   button.removeEventListene });  fu  logs.push('listener1'); button.removeEventListener('click', listener2, true);   };   const listener2 = function logs.push('listener2');   };   const listener3 = { handleEvent: function(event: Event) {   };   button.addEventListener('click', li   button.addEvent   bu   button.dispatchEvent(clickEvent);   expect(logs.length).toBe(2);   expect(logs).to   button.removeE   it('should be function() {   let logs: string[] = [];   const listener1 = function() { logs   };   cobutton.removeEven   };   const listener3 = {   logs.push('listener3'); }  button.addEventListener('click', listener1);   button.addEventListener('click', listener2);   button.addEventList   button.dispatchEven   expect(logs.length).toBe(2);   expect(logs).toEqual(['listener1', 'listener2']);   button.dispatchEvent(clickEvent);   expect(logs.length).toBe   expect(logs).toEqual(['listener2']);   button.removeEventListener('cli });function() {   let logs: string[] =   const listener1 = function() { logs.push('listener1');  const listener2 = function() { logs.push('listener2'); button.removeEventL button.removeEventListener('click', listener3, true);   };handleEvent: function(event: Event)   logs.push('listener3'); }   };   button.addEventListener('click', listener1, true);   button.addEventListener('click', listener2, true);  button.dispatch   expect(logs.length).toBe(2);  button.dispatchEvent(clickEvent);   expect(logs.length).toBe(1);   expect(logs).toEqual(['listener2']);   button.removeEventListener('click', listener2, true); });it('should be able to remove part of beforeward and afterward eventListene function() {   let logs: string[] = [];   const listener1 = function() { logs.push('listener1');   };   const li   };   const listener3 = { handleEvent: function(event: Event) { }   };   const listener4 = function() {  const listener5 = function() { logs.push('listener5');   };   button.addEventListener('click', listener2);   button.addEventListener('click', listener3);   button.addEventListener('click', listener4);  button.dispatchEvent(clickEvent);   expect(logs.length).toBe(4);  logs = [];   button.dispatchEvent(clickEvent);   expect(logs.length).toBe(3);  button.removeEventListener('click', listener1);   button.removeEventListener('click', listener3);   button.removeEventListener('click', listener5); })it('should be able to remove part of beforeward and afterwar function() {logs.push('listener1');   };  };   const listener3 = { handleEvent: function(event: Event) {   logs.push('listen}   };   const listener4 = function() { logs.push(   }; button.addEventListener('click', listener1, true);   button.addEventListener   button.addEventListener('click', listener3, true);   button.addEventListener('click', li   button.addEventListener('click', listener5,button.dispatchEvent(clickEvent);   expect(logs.length).toBe(4);   exp   logs = [];   button.dispatchEvent(clickEvent);   exp   ex   button.removeEventListener('click', listener1   button.removeEventListener('click',   button.removeEventListener('click', }); function() {   let logs: string[] = [];   const listener1 = function() {   };   const listener2 = function() { logs.push('listener2');   const listener3 = { handleEvent: function(e   logs.push('listener3');   button.removeEventListener('click', listene   }   };   button.addEvent   button.addEventListener('click',   bu  expect(logs).toEqual(['listener1', 'listener2', 'listener3']);   logs = [];   expect(logs.length).toBe(1);   expect(logs).toEqual(['listener3']);   button.removeEventListener('click', lis }); function() {   let log   const listener1 = fun logs.push('listener1');   };   cons logs.push('listener2');   const listener3 = { handleEvent: function(event   logs.push('listener3');   button.removeEventListen   button.removeEventListener('click', }   };   button.addEventListener('click', listener1, true);   button.addEventListener('click', listener2, true);   button.addEventListener   button.dispatchEvent(clickEvent);   expect(logs.length).toBe(3);   expect(logs).toEqual(['listener1', 'liste   logs = [];   button.dispatchEvent(clickEvent);   expect(logs.length).toBe(1)   expect(logs).toEqual(['listener3']);   button.removeEventListener('click', });let logs: string[] = [];   const listener1 = function() { logs.push('listener2');   };   const listener3 = { handleEvent: function(event: Event) {   l }   button.addEventListener('click', listener1);   button.addEventListener('click', listener2);   button.addEventListener('click', listener3);   button.dispatchEvent(clickEv   expect(logs.length).toBe(3);   expe   logs = [];   button.dispatchEvent(clickEvent);   expect(logs.length).toBe(2);   expect(logs).toEqual(['listener2', 'listener3']);   button.removeEventLi   button.removeEventListener('click', listener3) });it('should be able t function() {   let  logs.push('listener1');   };   const listener2 = funct logs.push('listener2');   }; handleEvent: function(event: Event)   button.removeEventListener('click }   };   button.addEventListener('click',button.addEventListener('click   button.addEventListener('click', listener3, true);   expect(logs.length).toBe(3);   expect(logs).toEqual(['listener1', 'listener2', 'listener3'   logs = [];   button.dispatchEvent(clickEvent);   expect(logs.length).toBe(2);   expect(logs).toEqual(['listener2', 'listener3']);   button.removeEventListener('cl });function() {   let logs: string[] = []; button.removeAllListeners!('cl logs.push('listener1');   }; logs.push('listener2');   };   const   logs.push('listener3'); }   };   button.addEventListener('click', listener1);   button.addEventLi   button   butto   expect(logs).toEqual(['listener1']);   logs = [];   expect(logs.length).toBe(0); });it('should be able  function() {   let logs: string[] = [];   const  logs.push('listener1');   const listener2 = function() {   }; handleEvent: function(event: Event)logs.push('listener3'); }   };   button.addEventList   button.addE   button.addEventListener('click', listener3, true);   butt   expec   logs = [];   button.dispatchEvent(clickEvent);   expect(logs.length).toBe(0); });it('should be able to remove function()const listener1 = function() {   };   const listener2 = function() { button.removeAllListeners!('click'); logs.push('listener2');   }; handleEvent: function(event: Event) {   logs.push('listener3'); }   };   button.addEventListener('click', li   button.addEventListener('click', list   button.addEventListener('click'   button.dispatchEvent(clickEvent);   expec   expe   logs   expect(logs.length).toBe(0); });it('should be able to remove all eve function() {   let logs: string[] = [];   const listener1 = function() { logs.push('listener1');   };   const listener2 = function() { but logs.push('listener2');   };   const listener3  ha   logs.push('liste }   };   button.ad   button.addEventListener('click', listener3, t   button.dispatchEvent(clic   expect(logs).toEqual(['lis   logs = [];   button.dispatchEvent(clickEvent);   expect(logs.length).toBe(0); });it('should be able t function() {   let lo logs.push('listener1');   };   const listener2 = function() { logs.push('listener2');   };   const listen handleEvent: function(event: Event) {   logs.push   but }   };   button.addEventListener('c   button.addEventListener('click', listener3);   expect(logs.length).toBe(3);   logs = [];   button });it('should be able to remove all eventListeners during last  function() {   let logs: string[] = [];   const listener1 = function() { logs.push('listener1   };   const lis logs.push(   };   const listene handl   logs.push('listener3');   button.removeAllListeners!('click'); }   };   button   button.a   button.dispatchEvent(clickEvent);   expect(l   button.dispatchEvent(clickEvent);   expect(logs.length).toBe(0); });  });  it('should be able to get eventListeners of specified event form EventTarget', fcconst listener3 = {handleEvent: function(event: Event) {}};const listener4 = function() {};button.addEventListenbutton.button.addEvbutton.addEventListener('mouseover', listener4);const listeexpect(listeners.length).toBe(3);button.removeE  });const listener1 = functionconst listener3 = {handleEvebuttobutton.addEventListener('mousehover', listener3);const listeners = button.eventListeners!();expect(listeners.length).toBexpebuttobutton.removeEventListener('mouseover', listener2);button.r  });  it(letlogs.push('listener1');};const listener2 = function() {logs.push('const listener3 = {  logs.push('listener3');}}logs.push('list};const listener5 = function() {logs.push('listener};button.addEventListenebutton.abutton.addEbutton.addEventListener('click', listener4);button.onmouseover = lexbuconst lisexpect(listeners.length).toBe(0);expect((button as any)expec button.dispatchEvent(expect(logs).toEqubutton.dispatchEvent(expect(logs).toE  });  it('should be able to remove all l function() { letlogs.push('listener1'); }; const listener2 = functi   logs.push('listener2'); }; const  logs.push('listener3');   } const listener4 = function() {   logs.push(' button.addEventListener('mouseover', listener1, true button.addEventListener('mouseover', lis button.addEventListener('click', lis butt expect(listeners.length).toBe(0); const mouseEvent = docum mouseEvent.initEvent('mouseover', true, true); button button.dispatchEvent(clickEvent); expect(logs).toEqual(['listener4']); });  it('should be able to remove all li let logs: string[] = []; const listener1 = function()   lo };   logs.push('l }; const listener3 = {   handleEvent: fun logs.push('liste   } }; const listener4   logs.push('liste }; button.ad button.addEventListener('mouseover', listener2, false); button.ad button.addEventL button.removeAllListeners!('m const liste expect(listeners.length).toBe(0); cons button.dispatchEvent(mouseEvent); exp button.dispatchEven expect(logs). button.removeEventListener('click', listene   it('should be able to remove all listeners of all evenlet logs: string[const listlogs.push('listener1');};const listener2 = function() {logs.pu};const listener3 = {handleEvent: f  logs.push('listener3');}   logs.push('listener4');};const listener5 = function() {logs.push('lisbutton.addEventListener('mouseovebutton.addEventListener('mousbutton.addEventListenexpect((button as any)[Zone.__symbol__(button.removeAllListeners!();const listeners =   expect((button as any)[Zone.__symbol__('ON_PROPERTYmouseover')]).toBeNuexpect(!!button.onmouseover).toBeFalsy();const mouseEvent = document.createEvent('Event')   button.dispatchEvent(mouseEvent);expect(logs).toEqual([]); let logconst listener1 = function() {logs.push('listener1');};const listenelogs.push('listener2'};const lihandleEvent: functi  logs.push('listener3');}};const listener4 = function() {logs.push(};button.addEventListene(butbutton.addEventListener('click', listener3);(button.removeEventLisbutton.removeEventListenerconst listeners = buttexpect(listeners.length).toBeconst mouseEvent = domouseEvent.initEexpect(logs)button.dispatchEvent(clickEvent)expect(logs).toEqual([]);   it('should be able to remove all listeners which were let logs: string[const listlogs.push('listener1');};const listener2 = function() {logs.pu};const listener3 = {handleEvent: f  logs.push('listener3');}   logs.push('listener4');};button.addEventListener('click', listener3);(button abutton.removeAllListeners!();const listeners = buteconst mouseEvent = document.createEvent('EventmouseEvent.initEvent('mouseover', true, true);bubutton.dispatchEvent(clickEvent);expect(logs).toEqual(['listener2', 'lis  });  it const hookSpy = jasmine.createSpy('hook'); const zone = rootZone.fo   name: 'spy',   onScheduleTask: (   parentZ   any => {return pa   } }); let logs: string[] = []; const  }; (listener1 as any).toString = function() {   return '[ob const listener2 = function() {   logs.push };   return 'function __BROWSERTOOLS_CO };   button.addEve   button.addEventListener('click', listener2); }); butt expect(hookSpy).not.toHaveBeenCalled expect(logs).toEqual(['Proxy log button.removeEventListener('click', listener1); button.removeEventListe button.dispatchEvent(clic expect(hookSpy).not.toHaveBeenCalled(); expect(logs).toEqual([]); }));  x let oriWindowOnError = window.onerror;let logs: string[] = [];window.onerror = function(err: any) {logs.puthrow new Error('test1');};button.addEventListener('click', listener1);const mouseEvent = document.createEvent('MouseEvent'mouseEvconst unhandledRejection = (e: Promis  fail('should not be here');};window.addEvenbutton.dispatchEvent(mouseEvent);expect(logs).toEqual(['Uncaught ErrorsetTimeout(()   window.removeEventListener('unhandledrejection', unhandledRe  window.onerror = oriWindowOnError;  done()});window.onerror = oriWindowOnError;}  xit('should not re-throfunction(done: DoneFn) {  //   le  try {let logs: string[] = [];const listener1 = function() {  throw new Error('te};const zone   name: 'error',  onHandleError: (delegate, curr, target, error) => {logs.pureturn fals  }});  button.addEventL});const mouseEventconst unhandledRejection = (e:};window.addEventListener('button.setTimeout(() => {  expect(  window.onerror = oriWindowOnError;  done();});  } catch (e: any) {window.onerror = oriWindo  }});  xit('shouasync function() {  await jasmine.spyOnGlobalErrorsAsync(async (globalErrorSpy) => {let };const listener2 = function() {  throw new Error('t};};  handleEvent: function() {logs.push('listener2'  }};button.addEventListener('clickbutton.addEventListener('button.adconst mouseEvent = document.createEvent('MouseEvent');mouseEvent.initEvent('click', true, true);expect(logs).toEqual(['listener1', 'listen  });});  xit('should be able tfunction(done: DoneFn) {  try {  name: 'error',  onHandleError: (delegate, curr, target, elog  }});let logs: string[] = [];const lis};const listener2 = function() {  throw new Error('teconst listener3 = function() {  throw new Error(const listener4 = {  handleEvent: functionlogs.push('listener2');};zone.runGuarded(() => {  button.addEventListener('click', listener  butto  button.addEventListener('cli});const mouconst unhandledRejection = (e: PromiseRejectionEvent) => {  fail('should not bewindow.addEventListener('unhandledrejection', unhanbutton.dispatc  'listener1', 'zone handled error test1',]);  expect(logs).toEqual([  ]);  window.removeEventListener('unhandledreje  done(  } catch (e: any) {  }});function(done: DoneFn) {  let logs: string[] = [];  try {  name: 'zone1',  onHandleError: (deleglogs.push(error.message);  }});const };  throw new Error('test1'};const l};const listener4 = {  handleEvent: function() {logs.};button.addEventListen  button.addEventListener('click', listener2);});button.addEventListener('clicconst mouseEvent =const unhandledRejection = (e:};window.addEventListener('unhandledrejectionexpect(logs).toEqual(['listene  } catch (e: any) {  }});// TODO: Re-enable via https://github.com/angular/angular/pull/41526xdescribe('unhandled promise rejection', () => {  const asyncTest = function(testFnreturn (done: Function) => {let asyncTestZone: Zone =Zone.current.fork(new AsyncTestZoneSpec(done, (error: Error) => {  fail(error);}, 'asyncTest'));asyncTestZone.run(testFn);};  };  it('should support window.addEvent if (!promiseUnhandleRejectionSupport()) {   return; } (Zone as Zone.roo window.removeEventListener('unhandledrejection', listener); expect(evt.type).toEqual('unh expect(evt.promise.constructor.name expect(evt.reaso   };   new Promise((resolve, reject) => { throw new Error('promise error');   }); }); }));  it('should if (!promiseUnhandleRejectionSupport()) {   return (Zone as any)[zoneSymbol('ignoreConsoleErrorUncaughtE Zone.roo window.removeEventListener('unhandledrejection', listener); p.catch(reason => {});   };   window.addEventListener(   const handle window.removeEv expect(evt.type).toEqual('rejectionhandled'); expect(evt expect(evt.rea   };   w throw new Error('promise err   }); }); })); if (!promiseUnhandleR   return; } Zone.root.fork({name: 'promise'}) window.removeEventListener('unh expect(evt.type).toEqual('unhandledre expect(evt.reason.message).toBe('promise e   }; window.removeEventListener('unhandledrejection', list expect(evt.type).toEqual('u expect(evt.promise.constructor.name expect(evt.reason.message).toBe('promise error'); evt.preventDef   };   window.   window.addEventListener('unhandledrejection', listener2);   new Promise((resolve, reject) => { throw new Error('promise error');   }); }); }));});// @JiaLiPassion, Edge// waixit('IntersectionObserver should ifEconst div = document.creadocument.body.appendChild(div);const optioconst zone = Zone.current.fork({name: 'intersectionObserverZonezone.run(() => {  const observer = new IntersectionObserver(() => {expect(observer.unobserve(div);done();  }, option  observer.observe(div);});div.style.display = 'none';div.}));it('HTM   ifEnvSupportsWithDone(supportCanvasTest, (done: Function) => { const canvas = document.createElement('canvas'); co const ctx = canvas.getContext('2d')!; ctx.beginPath(); ct ctx.lineTo(d, d); ctx.lineTo(0, d); ct  const scheduleSpy = jasmine.createSpy('scheduleSpy'); const zone: Zone = Zone.current.fo name: 'canvas', onScheduleTask: (delegate:   scheduleSpy()   return delegate.scheduleTask(targetZone, task); } }); con   expect(Zone.current.name).toEqu   expect(scheduleSpy).toH  reader.onloadend = function() { const base64data = re  }; }); });describe(it('ResizeObserver callback should b  const ResizeObserver = (window as a  const zone = Zone.current.fork({name: 'observe  const observer = new ResizeObserver((entries: expect(Zoexpect(entries.length).toBe(1);expect(entries[0].target).toobserver.disconnect();done();  });  zone.run(() => {observer.obs  });  documen});it('ResizeObserver callb   (done) => { const ResizeObseconst  const zone = Zone.current.fork({name: 'observer'}); let count = 0; const observer = new ResizeObserver((entri if (entry.target === div1) { expect(Zone.current.name).toEqual(zone.n } else { expect(Zone.current.name).toEqual('<rootcount++;   if (count ===  done();   } }); zone.run(() =>observer.observe(div1); }); Zone.root.run(() => {   observer.observe(div2); }); document.bod   });}));  it('navigator.mediaDevices.getUserMedia sho ifEnvSupportsWithDone(   () => { typeof navigator.mediaDevices.getUse   },   (done: Function) => { const zone = Zone.current.for zone.ru   navigator.medi .then(function(mediaStre   expect(Zone.curren   done(); }) .catch(function(err   console.log(err.name + ': ' + err.message);   expect(Zone.   done(); }); });   }  // Note: `n  // `getUserMedia` is through `navigator.me  // expose it direct () => { return !isEdge() & typeof (navigator as any).getUserMedia === 'function';   },   (done: Function) => { const zone = Zone.current.fork({name: 'media'}); zone.run(() => {   const constraints = {audio: true, video: {width: 1280, height: 720}};   (navigator as any) .getUserMedia( constraints, () => {   expect(Zone.current.name).toEqual(zone.name);   done(); }, () => {   expect(Zone.current.name).toEqual(zone.name);   done(); }); });   }));});  });  if (getIEVersion() === 11) {describe('pointer event in IE', () => {  const pointerEventsMap: {[key: string]: string} = {'MSPointerCancel': 'pointercancel','MSPointerDown': 'pointerdown','MSPointerEnter': 'pointerenter','MSPointerHover': 'pointerhover','MSPointerLeave': 'pointerleave','MSPointerMove': 'pointermove','MSPointerOut': 'pointerout','MSPointerOver': 'pointerover','MSPointerUp': 'pointerup'  };  let div: HTMLDivElement;  beforeEach(() => {div = document.createElement('div');document.body.appendChild(div);  });  afterEach(() => {document.body.removeChild(div);  });  Object.keys(pointerEventsMap).forEach(key => {it(`${key} and ${pointerEventsMap[key]} should both be triggered`, (done: DoneFn) => {const logs: string[] = [];div.addEventListener(key, (event: any) => {  expect(event.type).toEqual(pointerEventsMap[key]);  logs.push(`${key} triggered`);});div.addEventListener(pointerEventsMap[key], (event: any) => {  expect(event.type).toEqual(pointerEventsMap[key]);  logs.push(`${pointerEventsMap[key]} triggered`);});const evt1 = document.createEvent('Event');evt1.initEvent(key, true, true);div.dispatchEvent(evt1);setTimeout(() => {  expect(logs).toEqual([`${key} triggered`, `${pointerEventsMap[key]} triggered`]);});const evt2 = document.createEvent('Event');evt2.initEvent(pointerEventsMap[key], true, true);div.dispatchEvent(evt2);setTimeout(() => {  expect(logs).toEqual([`${key} triggered`, `${pointerEventsMap[key]} triggered`]);});setTimeout(done);});it(`${key} and ${pointerEventsMap[key]} with same listener should not be triggered twice`, (done: DoneFn) => {   const logs: string[] = [];   const listener = function(event: any) { expect(event.type).toEqual(pointerEventsMap[key]); logs.push(`${key} triggered`);   };   div.addEventListener(key, listener);   div.addEventListener(pointerEventsMap[key], listener);   const evt1 = document.createEvent('Event');   evt1.initEvent(key, true, true);   div.dispatchEvent(evt1);   setTimeout(() => { expect(logs).toEqual([`${key} triggered`]);   });   const evt2 = document.createEvent('Event');   evt2.initEvent(pointerEventsMap[key], true, true);   div.dispatchEvent(evt2);   setTimeout(() => { expect(logs).toEqual([`${pointerEventsMap[key]} triggered`]);   });   setTimeout(done); });it(`${key} and ${ pointerEventsMap[key]} should be able to be removed with removeEventListener`, (done: DoneFn) => {   const logs: string[] = [];   const listener1 = function(event: any) { logs.push(`${key} triggered`);   };   const listener2 = function(event: any) { logs.push(`${pointerEventsMap[key]} triggered`);   };   div.addEventListener(key, listener1);   div.addEventListener(pointerEventsMap[key], listener2);   div.removeEventListener(key, listener1);   div.removeEventListener(key, listener2);   const evt1 = document.createEvent('Event');   evt1.initEvent(key, true, true);   div.dispatchEvent(evt1);   setTimeout(() => { expect(logs).toEqual([]);   });   const evt2 = document.createEvent('Event');   evt2.initEvent(pointerEventsMap[key], true, true);   div.dispatchEvent(evt2);   setTimeout(() => { expect(logs).toEqual([]);   });   div.addEventListener(key, listener1);   div.addEventListener(pointerEventsMap[key], listener2);   div.removeEventListener(pointerEventsMap[key], listener1);   div.removeEventListener(pointerEventsMap[key], listener2);   div.dispatchEvent(evt1);   setTimeout(() => { expect(logs).toEqual([]);   });   div.dispatchEvent(evt2);   setTimeout(() => { expect(logs).toEqual([]);   });   setTimeout(done); });  });});  }});