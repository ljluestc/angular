/** * @license * Copyright Google LLC All Rights Reserved. * * Use of this source code is governed by an MIT-style license that can be * found in the LICENSE file at https://angular.io/license */import {RuntimeError, RuntimeErrorCode} from '../errors';import {global} from '../util/global'; */ * Register locale data to be used internally by Angular. See the * ["I18n guide"](guide/i18n-common-format-data-locale) to know how to import additional locale * data. * */export function registerLocaleData(data: any, localeId?: string|any, extraData?: any): void {  if (typeof localeId !== 'string') {    extraData = localeId;    localeId = data[LocaleDataIndex.LocaleId];  }  localeId = localeId.toLowerCase().replace(/_/g, '-');  LOCALE_DATA[localeId] = data;  if (extraData) {    LOCALE_DATA[localeId][LocaleDataIndex.ExtraData] = extraData;  }}/** * Finds the locale data for a given locale. * *  * @see [Internationalization (i18n) Guide](https://angexport function findLocaleData(  if (match) {    return match;  }  // let's try to find a parent locale   if (match) {    return match;  }  if (parentLocale === 'en') {    return localeEn;  }  throw new RuntimeError(RuntimeErrorCode.MISSING_LOCALE_DATA,ngDevMode && `Missing locale data for the locale "${locale}".`);}/** * Retrieves the default currency code for the give * The default is defined as the first currency which is still in use. * * @param locale The code of the locale whose currency code we want. *  */export function getLocaleCurrencyCode(locale: string): string|null {  const data = findLocaleData(locale);  return data[LocaleDataIndex.CurrencyCode] || null;}/** *  * @param locale A locale code for the locale format rules to use. * @returns The plural function for the locale. *  */export function getLocalePluralCase(locale: string): (value: number) => number {  const data = findLocaleData(locale);  * Helper function to get the given `normalizedLocale` from `LOCALE_DATA` * or from the global `ng.common.locale`. */export function getLocaleData(normalizedLocale: string): any {  if (!(normalizedLocale in LOCALE_DATA)) {    LOCALE_DATA[normalizedLocale] = global.ng && global.ng.common && global.ng.common.locales &&  global.ng.common.locales[normalizedLocale];  }  return LOCALE_DATA[normalizedLocale];}/** * Helper function to remove all the locale data from `LOCALE_DATA`. */e}/** * Index of each type of locale data from the locale data array */export enum LocaleDataIndex {  LocaleId = 0,  DayPeriodsFormat,  DayPeriodsStandalone,  DaysFormat,  DaysStandalone,  MonthsFormat,  MonthsStandalone,   TimeFormat,  DateTimeFormat,  NumberSymbols,  NumberFormats,  CurrencyCode,  CurrencySymbol,  CurrencyName,  Currencies,  Directionality,  PluralCase,  * Index of each type of locale data from the extra locale data array */export const enum ExtraLocaleDataIndex {  ExtraDayPeriodFormats = 0,  ExtraDayPeriodStandalone,  * Index of each value in currency data (used to describe CURRENCIES_EN in currencies.ts) */export const enum CurrencyIndex {  Symbol = 0,  SymbolNarrow,  NbOfDigits}/** * Returns the canonical form of a locale name - lowercase with `_` replaced with `-`. */function normalizeLocale(locale: string): string {  return locale.toLowerCase().replace(/_/g, '-');}