/** * @license * Copyright Google LLC All Rights Reserved. * * Use of this source code is governed by an MIT-style license that can be * found in the LICENSE file at https://angular.io/license */export interface NgModuleType<T = any> extends Type<T> {  Éµmod: NgModuleDef<T>; * Represents the expansion of an `NgModule` into its scopes. * * A scope is a set of directives and pipes that are visible in a particular context. Each  * set of directives and pipes exported by a module (that is, module B's exported scope gets added * to module A's compilation scope when module A imports B). */export interface NgModuleTransitiveScopes {  compilation: {directives: Set<any>; pipes: Set<any>;};  exported: {directives: Set<any>; pipes: Set<any>;};  schemas: SchemaMetadata[]|null;}/** * Runtime link information for NgModules. * * This is the internal data structure used by the runtime to assemble components, directives, * pipes, and injectors. *  * can change between versions. */export interface NgModuleDef<T> {  /** Token representing the module. Used by DI. */  type: T;  /** List of components to bootstrap. */  bootstrap: Type<any>[]|(() => Type<any>[]);  /** List of components, directives, and pipes declared by this module. */  declarations: Type<any>[]|(() => Type<any>[]);  /** List of modules or `ModuleWithProviders` imported by this module. */  imports: Type<any>[]|(() => Type<any>[]);  /**   * List of modules, `ModuleWithProviders`, components, directives, or pipes exported by this   * module.   */  exports: Type<any>[]|(() => Type<any>[]);  /**   * Cache   * This should never be read directly, but accessed via `transitiveScopesFor`.   */  schemas: SchemaMetadata[]|null;  /** Unique ID for the module with which it should be registered.  */  id: string|null;