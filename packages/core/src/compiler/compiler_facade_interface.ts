/** * @license * Copyright Google LLC All Rights Reserved. * * Use of this source code is governed by an MIT-style license that can be * found in the LICENSE file at https://angular.io/license */ * for late binding of `@angular/compiler` for JIT purposes. * * This file has two copies. Please ensure that they are in sync: *  - packages/compiler/src/compiler_facade_interface.ts(main) *  - packages/core/src/compiler/compiler_facade_interface.ts     (replica) * * Please ensure that the two files are in sync using this command: * ``` * cp packages/compiler/src/compiler_facade_interface.ts \ *    packages/core/src/compiler/compiler_facade_interface.ts * ``` */export interface ExportedCompilerFacade {  ÉµcompilerFacade: CompilerFacade;}exany;  compilePipeDeclaration(aangularCoreEnv: CoreEnvironment, sourceMapUrl: string, meta: R3InjectableMetadataFacade): any;  compileInjectableDeclaration(angularCoreEnv: CoreEnvironment, sourceMapUrl: string, meta: R3DeclareInjectableFacade): any;  compileInjector(angularCoreEnv: CoreEnvironment, sourceMapUrl: string, meta: R3InjectorMetadataFacade): any;  compileInjectorDeclaration(angularCoreEnv: CoreEnvironment, sourceMapUrl: string,declaration: R3DeclareInjectorFacade): any;  compileNgModule(angularCoreEnv: CoreEnvironment, sourceMapUrl: string, meta: R3NgModuleMetadataFacade): any;  compileNgModuleDeclaration(angularCoreEnv: CoreEnvironment, sourceMapUrl: string,declaration: R3DeclareNgModuleFacade): any;  compileDirective(angularCoreEnv: CoreEnvironment, sourceMapUrl: string, meta: R3DirectiveMetadataFacade): any;  compileDirectiveDeclaration(angularCoreEnv: CoreEnvironment, sourceMapUrl: string,declaration: R3DeclareDirectiveFacade): any;  compileComponent(angularCoreEnv: CoreEnvironment, sourceMapUrl: string, meta: R3ComponentMetadataFacade): any;  compileComponentDeclaration(angularCoreEnv: CoreEnvironment, sourceMapUrl: string,declaration: R3DeclareComponentFacade): any;  compileFactory(angularCoreEnv: CoreEnvironment, sourceMapUrl: string, meta: R3FactoryDefMetadataFacade): any;  compileFactoryDeclaration(angularCoreEnv: CoreEnvironment, sourceMapUrl: string, meta: R3DeclareFactoryFacade): any;  createParseSourceSpan(kind: string, typeName: string, sourceUrl: string): ParseSourceSpan;  FactoryTarget: typeof FactoryTarget;  // Note that we do not use `{new(): ResourceLoader}` here because  // the resource loader class is abstract and not constructable.  ResourceLoader: Function&{prototype: ResourceLoader};}export interface CoreEnvironment {  [name: string]: Function;}export type ResourceLoader = {};export type InputMap = {    bindingPropertyName: string,    classPropertyName: string,    required: boolean,    transformFunction: InputTransformFunction, export type Type = Function;export type OpaqueValue = unknown;e  Component = 1,  Injectable = 2,  }export interface R3DependencyMetadataFacade {  token: OpaqueValue;  attribute: string|null;  host: boolean;  optional: boolean;  self: boolean;  skipSelf: boolean;}e  attribute?: boolean;  host?: boolean;  optional?: boolean;  self?: boolean;}export interface R3PipeMetadataFacade {  name: string;  type: Type;  pipeName: string;  pure: boolean;  isStandalone: boolean;}  type: Type;  typeArgumentCount: number;  providedIn?: Type|'root'|'platform'|'any'|null;  useClass?: OpaqueValue;  useFactory?: OpaqueValue;  useExisting?: OpaqueValue;  useValue?: OpaqueValue;   type: Type;  bootstrap: Function[];  declarations: Function[];  imports: Function[];  exports: Function[];  schemas: {name: string}[]|null;  id: string|null;}  type: Type;  providers: Provider[];  imports: OpaqueValue[];}export interface R3HostDirectiveMetadataFacade {  directive: Type;  inputs?: string[];   name: string;  type: Type;  typeSourceSpan: ParseSourceSpan;  selector: string|null;  queries: R3QueryMetadataFacade[];  host: {[key: string]: string};  propMetadata: {[key: string]: OpaqueValue[]};  lifecycle: {usesOnChanges: boolean;};  inputs: (string|{name: string, alias?: string, required?: boolean})[];  outputs: string[];   providers: Provider[]|null;  viewQueries: R3QueryMetadataFacade[];  isStandalone: boolean;  isSignal: boolean;  hostDirectives: R3HostDirectiveMetadataFacade[]|null;}export interface R3ComponentMetadataFacade extends R3DirectiveMetadataFacade {  template: string;  preserveWhitespaces: boolean;   styles: string[];  encapsulation: ViewEncapsulation;  viewProviders: Provider[]|null;  interpolation?: [string, string];  changeDetection?: ChangeDetectionStrategy;}  type: Type;  inputs?: {    [classPropertyName: string]: string|    [bindingPropertyName: string,   outputs?: {[classPropertyName: string]: string};  host?: {    attributes?: {[key: string]: OpaqueValue};    listeners?: {[key: string]: string};    properties?: {[key: string]: string};    classAttribute?: string;    styleAttribute?: string;  };  queries?: R3DeclareQueryMetadataFacade[];  viewQueries?: R3DeclareQueryMetadataFacade[];  providers?: OpaqueValue;  exportAs?: string[];  usesInheritance?: boolean;  usesOnChanges?: boolean;  isStandalone?: boolean;  hostDirectives?: R3HostDirectiveMetadataFacade[]|null;  isSignal?: boolean;}export interface R3DeclareComponentFacade extends R3DeclareDirectiveFacade {   styles?: string[];  // Post-standalone libraries use a unified dependencies field.  dependencies?: R3DeclareTemplateDependencyFacade[];  // Pre-standalone libraries have separate component/directive/pipe fields:  components?: R3DeclareDirectiveDependencyFacade[];  directives?: R3DeclareDirectiveDependencyFacade[];  pipes?: {[pipeName: string]: OpaqueValue|(() => OpaqueValue)};  viewProviders?: OpaqueValue;  animations?: OpaqueValue;  changeDetection?: ChangeDetectionStrategy;  encapsulation?: ViewEncapsulation;  interpolation?: [string, string];   kind: string}&(R3DeclareDirectiveDependencyFacade|R3DeclarePipeDependencyFacade|   R3DeclareNgModuleDependencyFacade);export interface R3DeclareDirectiveDependencyFacade {  kind?: 'directive'|'component';  selector: string;  type: OpaqueValue|(() => OpaqueValue);  inputs?: string[];  outputs?: string[];  exportAs?: string[];}export interface R3DeclarePipeDependencyFacade {  kind?: 'pipe';  name: string;  type: OpaqueValue|(() => OpaqueValue);}export interface R3DeclareNgModuleDependencyFacade {  kind: 'ngmodule';  type: OpaqueValue|(() => OpaqueValue);}export enum R3TemplateDependencyKind {  Directive = 0,  Pipe = 1,  NgModule = 2,}export interface R3TemplateDependencyFacade {  kind: R3TemplateDependencyKind;  type: OpaqueValue|(() => OpaqueValue);}export interface R3FactoryDefMetadataFacade {   typeArgumentCount: number;  deps: R3DependencyMetadataFacade[]|null;  target: FactoryTarget;}export interface R3  deps: R3DeclareDependencyMetadataFacade[]|'invalid'|null;  target: FactoryTarget;  type: Type;  providedIn?: Type|'root'|'platform'|'any'|null;  useClass?: OpaqueValue;  useFactory?: OpaqueValue;  useValue?: OpaqueValue;  deps?: R3DeclareDependencyMetadataFacade[];}export enum ViewEncapsulation {  Emulated = 0,  // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.  None = 2,  ShadowDom = 3}  first: boolean;  predicate: OpaqueValue|string[];  descendants: boolean;  emitDistinctChangesOnly: boolean;  static: boolean;}export interface R3DeclareQueryMetadataFacade {  propertyName: string;  first?: boolean;  predicate: OpaqueValue|string[];  descendants?: boolean;  read?: OpaqueValue; }export interface R3DeclareInjectorFacade {  type: Type;  imports?: OpaqueValue[];  providers?: OpaqueValue[];}  bootstrap?: OpaqueValue[]|(() => OpaqueValue[]);  declarations?: OpaqueValue[]|(() => OpaqueValue[]);  imports?: OpaqueValue[]|(() => OpaqueValue[]);   id?: OpaqueValue;}export interface R3DeclarePipeFacade {  type: Type;  name: string; }export interface ParseSourceSpan {  start: any;  end: any;  details: any;  fullStart: any;}