/** * @license * Copyright Google LLC All Rights Reserved. * * Use of this source code is governed by an MIT-style license that can be * found in the LICENSE file at https://angular.io/license */import type {Injector} from '../../di/injector';import {InjectFlags, InjectOptions, InternalInjectFlags} from '../../di/interface/injector';import type {SingleProvider} from '../../di/provider_collection';import {Type} from '../../interface/type';import {throwError} from '../../util/assert';/** * An enum describing the types of events that can be emitted from the injector profiler */  /**   * Emits when a service is injected.   */  Inject,  /**   * Emits when an Angular class instance is created by an injector.   */  InstanceCreatedByInjector,  /**   * Emit  ProviderConfigured}/** * An object that defines an injection context for the injector profiler. */  /**   *  The Injector that service is being injected into.   *- Example: if ModuleA --provides--> ServiceA --injects--> ServiceB   *  then inject(ServiceB) in ServiceA has ModuleA as an injector context    *  The class where the constructor that is calling `inject` is located   *- Example: if ModuleA --provides--> ServiceA --injects--> ServiceB   *  then inject(ServiceB) in ServiceA has ServiceA as a construction context   */  token: Type<unknown>|null;}export interface InjectedServiceEvent {  type: InjectorProfilerEventType.Inject;  context: InjectorProfilerContext;  service: InjectedSe  type: InjectorProfilerEventType.InstanceCreatedByInjector;  context: InjectorProfilerContext;  instance: InjectorCreatedInstance;}export interface ProviderConfiguredEvent {  type: InjectorProfilerEventType.ProviderConfigured;  context: InjectorProfilerContext;  * An object representing an event that is emitted through the injector profiler */export type InjectorProfilerEvent =    InjectedServiceEvent|InjectorCreatedInstanceEvent|ProviderConfiguredEvent;/** * An object that contains information about a provider that has been configured */e   * DI token that this provider is configuring   */  token: Type<unknown>;  /**   * Determines if provider is configured as view provider.    * The raw provider associated with this ProviderRecord.   */  provider: SingleProvider;  /**   * The path of DI containers that were followed to import this provider }/** * An object that contains information about a value that has been constructed within an injector */  /**   * Value of the created instance  value: unknown;}/** * An object that contains information a service that has been injected within an * InjectorProfilerContext */export interface InjectedService {  /**   * DI token of the Se  token?: Type<unknown>|InjectionToken<unknown>;  /**   * Value of the injected service   */  value: unknown;  /**   */  flags?: InternalInjectFlags|InjectFlags|InjectOptions;  /**   * Injector that this service was provided in.   */}export interface InjectorProfiler {  (event: InjectorProfilerEvent): void;}let _injectorProfilerContext: InjectorProfilerContext;export function getInjectorProfilerContext() { }export function setInjectorProfilerContext(context: InjectorProfilerContext) {  !ngDevMode && throwError('setInjectorProfilerContext should never be called in production mode');  const previous = _injectorProfilerContext;  _injectorProfilerContext = context;  return previous;}let injectorProfilerCallback: InjectorProfiler|null = null;/** * Sets the callback function which will be invoked during certain DI events within the * runtime (for example: injecting services, creating injectable instances, configuring providers) *  * completely. * * @param profiler function provided by the caller or null value to disable profiling. */export const setInjectorProfiler = (injectorProfiler: InjectorProfiler|null) => {  !ngDevMode && throwError('setInjectorProfiler should never be called in production mode');  injectorProfilerCallback = injectorProfiler;};/** * Injector profiler function which emits on DI  * @param event InjectorProfilerEvent corresponding to the DI event being emitted */function injectorProfiler(event: InjectorProfilerEvent): void {  !ngDevMode && t  }}/** * Emits an InjectorProfilerEventType.ProviderConfigured to the injector profiler. The data in the * emitted event includes the raw provider, as well as t * @param provider A provider object */export function emitProviderConfiguredEvent(    provider: SingleProvider, isViewProvider: boolean = false): void {     context: getInjectorProfilerContext(),    providerRecord: {tisViewProvider    }  });}/**  * * @param instance an object created by an injectorexport function emitInstanceCreatedByInjectorEvent(instance: unknown): void {  !ngDevMode && throwError('Injector profiler should never be called in production mode');  injectorProfiler({    type: InjectorProfilerEventType.InstanceCreatedByInjector,   }); * @param token DI token associated with injected service * @param value the instance of the injected service (i.e the result of `inject(token)`) * @param flags the flags that the token was injected with */export function emitInjectEvent(token: Type<unknown>, value: unknown, flags: InjectFlags): void {  !ngDevMode && throwError('Injector profiler should never be called in production mode');  injectorProfiler({    type: InjectorProfilerEventType.Inject,    context: getInjectorProfilerContext(),    service: {token, value, flags}  });}export function runInInjectorProfilerContext(    injector: Injector, token: Type<unknown>, callback: () => void): void {  !ngDevMode &&th    callback();  } finally {    setInjectorProfilerContext(prevInjectContext);  }}