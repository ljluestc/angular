/** * @license * Copyright Google LLC All Rights Reserved. * * Use of this source code is governed by an MIT-style license that can be * found in the LICENSE file at https://angular.io/license */import {TNode, TNodeFlags, TNodeType} from './node';import {RNode} from './renderer_dom';import {FLAGS, LView, LViewFlags} from './view';/** * True if `value` is `LView`. */export function isLView(value: RNode|LView|LContainer|{}|null): value is LView {  return Array.isArray(value) && typeof value[TYPE] === 'object';}/** * True if `value` is `LContainer`. * @param value wrapped value of `RNode`, `LView`, `LContainer` */e}export function isContentQueryHost(tNode: TNode): boolean {  return (tNode.flags & TNodeFlags.hasContentQuery) !== 0;}export function isComponentHost(tNode: TNode): boolean {  return tNode.componentOffset > -1;}export function isDirectiveHost(tNode: TNode): boolean {  return (tNode.flags & TNodeFlags.isDirectiveHost) === TNodeFlags.isDirectiveHost;}}export function isRootView(target: LView): boolean {  return (target[FLAGS] & LViewFlags.IsRoot) !== 0;}}export function hasI18n(lView: LView): boolean {  return (lView[FLAGS] & LViewFlags.HasI18n) === LViewFlags.HasI18n;}}