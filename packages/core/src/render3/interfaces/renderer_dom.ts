/** * @license * Copyright Google LLC All Rights Reserved. * * Use of this source code is governed by an MIT-style license that can be * found in the LICENSE file at https://angular.io/license */ * We do this by defining a subset of DOM API to be the renderer and then * * At runtime we can then use the DOM api directly, in server or web-worker * it will be easy to implement such API. *//** Subset of API needed for appending elements and text nodes. */export interface RNode {  /**   * Returns the parent Element, Document, or DocumentFragment     /**   * Returns the parent Element if there is one   */  parentElement: RElement|null;  /**   * Gets the Node immediately following this one in the parent's childNodes   */   * Removes a child from the current node and returns the removed node   * @param oldChild the child node to remove   */  removeChild(oldChild: RNode): RNode;  /**   * Insert a child node.   * Used exclusively for adding View root nodes into ViewAnchor location.   */  insertBefore(newChild: RNode, refChild: RNode|null, isViewRoot: boolean): void;  /**   * Append a child node.   * Used exclusively for building up DOM which are static (ie not View roots)   */  appendChild(newChild: RNode): RNode;}/** * Subset of API needed for writing at */export interface RElement extends RNode {  firstChild: RNode|null;  style: RCssStyleDeclaration;  classList: RDomTokenList;  className: string;  textContent: string|null;  hasAttribute(name: string): boolean;  getAttribute(name: string): string|null;  setAttribute(name: string, value: string|TrustedHTML|TrustedScript|TrustedScriptURL): void;  removeAttribute(name: string): void;  setAttributeNS(n  addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;  removeEventListener(type: string, listener?: EventListener, options?: boolean): void;  setProperty?(name: string, value: any): void;}export interface RCssStyleDeclaration {  removeProperty(propertyName: string): string;  setProperty(propertyName: string, value: string|null, priority?: string): void;}export interface RDomTokenList {  add(token: string): void;  remove(token: string): void;}export interface RText extends RNode {  textContent: string|null;}export interface RComment extends RNode {  textContent: string|null;}export interface RTemplate extends RElement {  tagName: 'TEMPLATE';  content: RNode;}// Note: This hack is necessary so we don't erroneously get a circular dependency// failure based on types.export const unusedValueExportToPlacateAjd = 1;