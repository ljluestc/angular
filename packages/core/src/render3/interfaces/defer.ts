/** * @license * Copyright Google LLC All Rights Reserved. * * Use of this source code is governed by an MIT-style license that can be * found in the LICENSE file at https://angular.io/license */ * to download dependencies that can be defer-loaexport type DependencyResolverFn = () => Array<Promise<DependencyType>>;/** * Describes the state of defer block dependency loading. */export enum DeferDependenciesLoadingState {  /** Initial state, dependency loading is not yet triggered */  SCHEDULED,  /** Dependency loading is in progress */  IN_PROGRESS,  /** Dependency loading has completed successfully */  COMPLETE,  /** Dependency loading has failed */  FAILED,}/** Configuration object for a `{:loading}` block as it is stored in the component constants. */export type De * Describes the data shared across all instances of a {#defer} block. */  /**   * Index in    */  primaryTm   * block can be found.   */    * for the `{:loading}` block.   */   * Index in an LView and TData arrays where a template for the `{:placeholder}`   * block can be found.  placeholderTmplIndex: number|null;  /**   * Extra configuration parameters (such as `after` and `minimum`)   * for the `{:placeholder}` block.   */  placeholderBlockConfig: DeferredPlaceholderBlockConfig|null;  /**   * Index in an LView and TData arrays where a template for the `{:error}`   * block can be found.   */  errorTmplIndex: number|nu   */  dependencyResolverFn: DependencyResolverFn|null;  /**   * Keeps track of the current loading state of defer block dependencies.   */  loadingState: DeferDependencie   * are multiple instances of a defer block (e.g. if it was used inside of an *ngFor),   * which all await the same set of dependencies.   */  loadingPromise: Promise<unknown>|null;}/** * * @publicApi * @developerPreview */export enum DeferBlockState {  Placeholder = 0,  /** The {:loading} block content is rendered */  Loading = 1,  /** The main content block content is rendered */  Complete = 2,  /** The {:error} block content is rendered */  Error = 3,}/** * * Note: this state is internal only and *must* be represented * with a number lower than any value in the `DeferBlockState` enum. */export enum DeferBlockInternal  Initial = -1,}/** * A slot in the `LDeferBlockDetails` array that contains a number * that represent a current block state that is beexport const DEFER_BLOCK_STATE = 0;/** * Describes instance-specific {#defer} block data. * * Note: currently there is only the `state` s * (which would require per-instance state). */export interface LDeferBlockDetails extends Array<unknown> {  [DEFER_BLOCK_STATE]: DeferBlockState|DeferBlockInternalState;}/** * Internal structure used for configuration of defer block behavior.   behavior: DeferBlockBehavior;}/** * Options for configuring defer blocks behavior. * @publicApi * @developerPreview */export enum DeferBlockBehavior {  /**   * Manual trigge   */  Manual,  /**   */  Playthrough,